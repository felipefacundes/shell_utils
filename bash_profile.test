#!/bin/bash
# License: GPLv3
# Credits: Felipe Facundes

# Define a signal handler to capture SIGINT (Ctrl+C)
trap 'kill $(jobs -p)' SIGTERM #SIGHUP #SIGINT #SIGQUIT #SIGABRT #SIGKILL #SIGALRM #SIGTERM

if [[ ! $DISPLAY && ${XDG_VTNR} == 1 ]]; then
if [[ "${XDG_SESSION_TYPE}" = tty ]]; then
#
### KEYBOARD
export XKB_DEFAULT_LAYOUT=br
export XKB_DEFAULT_OPTIONS=grp:alt_shift_toggle
# COLORS VARIABLES
. ~/.shell_utils/variables/shell_colors.sh
#export vblank_mode=0
#export __GL_SYNC_TO_VBLANK=0

export SSH_AUTH_SOCK
declare file=~/.zprofile
export wms_logs_dir="${HOME}/.WMs_logs_dir"
declare -i wms_logs_dir_size=`du "${wms_logs_dir}" | awk '{print $1}'`
scripts=~/.shell_utils/scripts

if [ ! -d "${wms_logs_dir}" ]; then
    mkdir -p "${wms_logs_dir}"
fi
 
if [ "${wms_logs_dir_size}" -gt 2097152 ]; then
    find "${wms_logs_dir}" -type f \( -name "*.log" \) -size +100M -exec rm {} \; > /dev/null 2>&1 &
fi

# Systemd log
(systemd-analyze blame > ~/.sysAnalyze) > /dev/null 2>&1

[[ "$XDG_SESSION_TYPE" = "wayland" ]] && export MOZ_ENABLE_WAYLAND=1

# FIX XDG HOME DIRS
[[ ! -d ~/Pictures ]] && rm ~/.config/user-dirs.dirs && LANG=en xdg-user-dirs-update > /dev/null 2>&1

# function read
# automatically run startx when logging in on tty1

rm ~/.startx_log
touch ~/.startx_log
clear

local_count() {
    echo "${shell_color_palette[bgreen]}Exiting:${shell_color_palette[color_off]}"
    for i in {1..2}; do
        echo -n "${i}. "
        sleep 1
    done
    clear
}

cursor_theme_fix()
{
    exec "${scripts}"/cursor_theme_fix.sh -t
}
cursor_theme_fix &

GTK_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-3.0/settings.ini"
GTK2_RC_FILES="${HOME}/.gtkrc-2.0" #"${HOME}/.gtkrc-2.0:${XDG_CONFIG_HOME}/gtk-2.0/gtkrc:/etc/gtk-2.0/gtkrc"
export GTK_THEME="$(grep 'gtk-theme-name' ${GTK_RC_FILES} | cut -d'=' -f2)"
# ICON ...
export XCURSOR_THEME="$(grep 'gtk-cursor-theme-name' ${GTK_RC_FILES} | cut -d'=' -f2)"
export XCURSOR_SIZE="$(grep 'gtk-cursor-theme-size' ${GTK_RC_FILES} | cut -d'=' -f2)"

wm_wayland() {

    export GTK_IM_MODULE=uim 
    export QT_IM_MODULE=uim 
    export XMODIFIERS=@im=uim 
    export XDG_CURRENT_DESKTOP="${wm_wayland}" 
    export WB_AUTOSTART_ENVIRONMENT=GNOME:KDE 
    export GDK_BACKEND=wayland 
    #export QT_QPA_PLATFORM=wayland
    export QT_STYLE_OVERRIDE=kvantum #QT_STYLE_OVERRIDE=gtk2 # needed qt5-styleplugins
    export WLR_NO_HARDWARE_CURSORS=1 
    export MOZ_ENABLE_WAYLAND=1 
    #export MOZ_USE_XINPUT2=1   # causes crashes
    export XDG_SESSION_TYPE=wayland 
    #/usr/bin/dbus-daemon --session --address=unix:path=/tmp/dbus-session-socket &
    #export DBUS_SESSION_BUS_ADDRESS=unix:path=/tmp/dbus-session-socket

    # WM LOG OUTPUT
    echo -e "${wm_wayland} log - `date +'%d/%m/%Y - %T'`\n\
------------------------------------\n\n" >> "${wms_logs_dir}"/"${wm_wayland}_$(date +'%d-%m-%Y - %T')".log > /dev/null 2>&1

    exec "${wm_wayland}" "$@" >> "${wms_logs_dir}"/"${wm_wayland}_$(date +'%d-%m-%Y - %T')".log > /dev/null 2>&1

}

standard_wm() {
    standard_wm_conf="${HOME}/.standard_wm.conf"
    [[ ! -f "${standard_wm_conf}" ]] && touch "${standard_wm_conf}"

    if [ "${wm_wayland}" ]
    then
        echo 'protocol=1' | tee "${standard_wm_conf}" > /dev/null 2>&1
        echo -e "swm=${wm_wayland}" | tee -a "${standard_wm_conf}" > /dev/null 2>&1
    fi

    if [ "${start_wm}" ]
    then
        echo 'protocol=2' | tee "${standard_wm_conf}" > /dev/null 2>&1
        echo -e "swm=${start_wm}" | tee -a "${standard_wm_conf}" > /dev/null 2>&1
    fi
}

echo -e "\n${shell_color_palette[byellow]}Choose an Option:\n"
echo -e "${shell_color_palette[bwhite]}1 - X11"
echo -e "${shell_color_palette[bpurple]}2 - Wayland"
echo -e "${shell_color_palette[bcyan]}3 - Terminal${shell_color_palette[color_off]}"
echo
read -p "Digite a opção desejada (1 a 3): " sessao
echo

clear

case $sessao in
    1)
        echo "Você escolheu X11."
        dir="/usr/share/xsessions"
        ;;
    2)
        echo "Você escolheu Wayland."
        dir="/usr/share/wayland-sessions"
        ;;
    3)
        echo -e "${shell_color_palette[bgreen]}Welcome terminal!${shell_color_palette[color_off]}\n"
        zsh
        local_count
        source "${file}"
        ;;
    *)
        protocol=`cat ~/.standard_wm.conf | head -n1 | cut -f2 -d'='`
        swm=`cat ~/.standard_wm.conf | tail -n1 | cut -f2 -d'='`

        if [ "${protocol}" = 1 ]; then
            wm_wayland="${swm}"
            wm_wayland
            local_count
        elif [ "${protocol}" = 2 ]; then
            export start_wm="${swm}"
            [ $XDG_VTNR ] && exec startx >> ~/.startx_log > /dev/null 2>&1
            local_count
        else
            echo -e "${shell_color_palette[bred]}Wrong Option!${shell_color_palette[color_off]}"
            local_count
            source "${file}"
        fi
        ;;
esac

# Lista os gerenciadores de janelas disponíveis
wms=($(ls $dir))
count=${#wms[@]}

echo "Gerenciadores de janelas disponíveis:"
for ((i=0; i<$count; i++)); do
    echo "$((i+1))) ${wms[$i]}"
done

read -p "Escolha o gerenciador de janelas (1-$count): " wm_choice

# Verifica se a escolha é válida
if [[ $wm_choice -lt 1 ]] || [[ $wm_choice -gt $count ]]; then
    echo "Opção inválida."
    exit 1
fi

# Extrai o valor após Exec= do arquivo .desktop selecionado
wm_file="${wms[$((wm_choice-1))]}"
exec_value=$(grep -oP '(?<=Exec=).*' "$dir/$wm_file")

if [[ $sessao -eq 1 ]]; then
    # Exporta a escolha para a variável start_wm para X11
    export start_wm=$exec_value
    echo "O gerenciador de janelas escolhido foi $start_wm"
    standard_wm
    [ $XDG_VTNR ] && exec startx >> ~/.startx_log > /dev/null 2>&1
    local_count
    exit
else
    # Executa diretamente para Wayland
    export wm_wayland=$exec_value
    standard_wm
    wm_wayland
    local_count
    echo "O gerenciador de janelas escolhido foi $wm_wayland"
    exit
fi

fi
fi
# Wait for all child processes to finish
wait