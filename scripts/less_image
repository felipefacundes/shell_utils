#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

clear

# ANSI colors
INFO_COL=${INFO_COL:-"\e[1;38;5;16;106m"} # Display instructions with cyan background and black text
RED="\e[1;31m"
NC="\e[0m"

# Function to display help
help() {
    cat <<EOF | less -i
Usage: ${0##*/} [OPTIONS] IMAGE_DIR_OR_FILE

Display images from a directory, file, or stdin using various image display tools such as img2sixel, viu, catimg, or ImageMagick.

Options:
  -h, --help    Display this help message and exit.

Arguments:
  IMAGE_DIR_OR_FILE  Specify the source of images. This can be:
                     - A directory containing image files.
                     - A single image file.
                     - '-' to read image data from stdin.

Description:
  This script allows you to view images directly in the terminal using various tools. It supports
  multiple image formats and can handle input from directories, individual files, or standard input.
  The script automatically detects the best available tool to display the images and provides a simple
  interface for navigating through multiple images.

Supported Tools:
  - img2sixel: A tool for displaying images in the terminal using the SIXEL protocol.
  - viu: A fast terminal image viewer with support for various formats.
  - catimg: A simple tool to display images in the terminal using ASCII art.
  - ImageMagick (magick): A powerful image manipulation tool that can also display images in the terminal.

Environment Variables:
  INFO_COL: Set the ANSI color for displaying instructions.
  LESS_IMG_SIXEL_W: Set the width for SIXEL image display (default: 1000).
  LESS_IMG_SIXEL_H: Set the height for SIXEL image display (default: 950).
  LESS_IMG_VIU_W: Set the width for viu image display (default: 200).
  LESS_IMG_VIU_H: Set the height for viu image display (default: 80).
  LESS_IMG_CATIMG_W: Set the width for catimg image display (default: 150).
  LESS_IMG_CHAFA_S: Set the size for chafa image display (default: 70).
  CLEAR: Control whether the terminal is cleared before displaying an image.
         - Accepted values: true, 1, or ":" to enable clearing.
         - If not set or set to any other value, the terminal will not be cleared.

Navigation:
  - Use 'w' or the up arrow key to view the previous image.
  - Use 's' or the down arrow key to view the next image.
  - Press 'q' or 'Q' to quit the image viewer.

Examples:
  ${0##*/} /path/to/images          # View images from a directory.
  ${0##*/} image.jpg                # View a single image file.
  cat image.jpg | ${0##*/} -        # View an image from stdin.

Notes:
  - If no tool is specified via the LESS_IMG environment variable, the script will attempt to use
    the best available tool in the following order: img2sixel, viu, catimg, chafa, or ImageMagick.
  - Temporary files created from stdin input are stored in /tmp and are automatically cleaned up.

License: GPLv3
Credits: Felipe Facundes
EOF
    exit 0
}

# Check for help argument
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    help
fi

# Input source (directory, file, or stdin)
INPUT_SOURCE="$1"

# Array to hold image paths or data
images=()

# Function to list images in a directory
list_images() {
    local dir="$1"
    shopt -s nullglob nocaseglob nocasematch
    set -- "$dir"/*{jpg,jpeg,png,gif,webp,pdf,tiff,tif,p?m,x[pb]m,bmp,ico,svg,eps}
    [[ $# != 0 ]] || return 1
    readarray -t images < <(printf "%s\n" "$@" | sort)

    # Only show first frame of animated GIFs if filename not specified.
    for x in "${!images[@]}"; do
        if [[ ${images[$x]} =~ (gif|webp|pdf)$ ]]; then
            images["$x"]="${images[$x]}[0]"
        fi
    done
    set -- "${images[@]}"
}

# Function to read image paths from stdin or a file
read_image_paths() {
    while IFS= read -r line; do
        # Remove leading/trailing whitespace and ignore empty lines
        line=$(echo "$line" | xargs)
        if [[ -n "$line" ]]; then
            images+=("$line")
        fi
    done
}

# Function to handle raw image data from stdin
handle_raw_image_data() {
    SCRIPT="${0##*/}"
    TMPDIR="${TMPDIR:-/tmp}"
    TMP_DIR="${TMPDIR}/${SCRIPT%.*}"
    [[ ! -d "$TMP_DIR" ]] && mkdir -p "$TMP_DIR"
    # If the input is a pipe, store the content in a temporary file
    if [[ -p /dev/stdin ]]; then
        TEMP_FILE=$(mktemp "${TMP_DIR}"/less_image_XXXXXX.sixel)
        cat - > "$TEMP_FILE"
        images+=("$TEMP_FILE")
    else
        # Use ImageMagick to convert raw image data to sixel and display it
        if command -v magick >/dev/null 2>&1; then
            magick - -resize "${LESS_IMG_SIXEL_W:-1000}x${LESS_IMG_SIXEL_H:-950}"! sixel:-
            exit 0
        else
            echo -e "${RED}Error: ImageMagick (magick) is required to handle raw image data.${NC}"
            exit 1
        fi
    fi
}

# Check if input is from stdin (pipe or process substitution)
if [[ "$INPUT_SOURCE" == "-" || -p /dev/stdin ]]; then
    # Check if stdin is a terminal (no data piped)
    if [[ -t 0 ]]; then
        echo -e "${RED}Error: No input provided via stdin.${NC}"
        help | head -n 37
    else
        # Handle raw image data
        handle_raw_image_data
    fi
elif [[ -d "$INPUT_SOURCE" ]]; then
    # Input is a directory: list all image files
    if ! list_images "$INPUT_SOURCE"; then
        echo -e "\n${RED}Error: No images found in the directory '$INPUT_SOURCE'.${NC}"
        exit 1
    fi
elif [[ -f "$INPUT_SOURCE" ]]; then
    # Input is a single file: treat it as the only image
    images=("$INPUT_SOURCE")
else
    # Check if the input is a process substitution (e.g., <(lsix))
    if [[ "$INPUT_SOURCE" =~ ^/proc/self/fd/[0-9]+$ ]]; then
        # Read image paths from the process substitution file
        read_image_paths < "$INPUT_SOURCE"
    else
        echo -e "${RED}Error: '$INPUT_SOURCE' is not a valid directory, file, or stdin input.${NC}\n"
        help | head -n 37
    fi
fi

# Check if there are any images to display
if [[ ${#images[@]} -eq 0 ]]; then
    echo -e "\n${RED}Error: No images found in the input source.${NC}"
    exit 1
fi

# Initial index
index=0

cmd_check() {
    [[ "${#no_cmd[*]}" -gt 1 ]] && msg=$(echo "${no_cmd[*]}" | awk 'BEGIN {first=1} {for (i=1; i<=NF; i++) \
    {if (first) {printf "%s", $i; first=0} else {printf " or %s", $i}}} END {print ""}') || msg="${no_cmd[*]}"
    [[ "$1" == "-msg" ]] && echo "Install ${msg}" && no_cmd=() && exit 1
    ! command -v "$1" 1>/dev/null && no_cmd+=(\""$2"\") && return 1 || return 0
}

# TERMINAL COLOR AUTODETECTION.
autodetect_color() {
    # The following defaults may be overridden if autodetection succeeds.
    numcolors=16     # Default number of colors in the palette.
    timeout=0.25

    # Find out how many color registers the terminal has
    IFS=";" read -ra REPLY -s -t ${timeout} -d "S" -p $'\e[?1;1;0S' >&2
    [[ ${REPLY[1]} == "0" ]] && numcolors=${REPLY[2]}

    # YAFT is vt102 compatible, cannot respond to vt220 escape sequence.
    if [[ "$TERM" == yaft* ]]; then numcolors=256; fi

    # Increase colors, if needed
    if [[ $numcolors -lt 256 ]]; then
        # Attempt to set the number of colors to 256.
        # This will work for xterm, but fail on a real vt340.
        IFS=";"  read -ra REPLY -s -t ${timeout} -d "S" -p $'\e[?1;3;256S' >&2
        [[ ${REPLY[1]} == "0" ]] && numcolors=${REPLY[2]}
    fi
}
autodetect_color

imgview() {
    local file="${images[$index]}"
    local sixel_size="${LESS_IMG_SIXEL_W:-1000}x${LESS_IMG_SIXEL_H:-950}!"

    [[ "$CLEAR" == true || "$CLEAR" == 1 || "$CLEAR" == ":" ]] && clear
    # Display the image using the appropriate tool
    if [[ -p /dev/stdin ]]; then
        cat "$file" 2>/dev/null && rm "$TEMP_FILE"
    else
        { [[ -z "$TERMUX_VERSION" ]] && [[ -z "$XTERM_VERSION" ]] && [[ -z "$LESS_IMG" || "$LESS_IMG" == 1 ]] && cmd_check magick imagemagick &&
        magick -quiet "${file}" -auto-orient -resize "$sixel_size" -colors "$numcolors" sixel:- 2>/dev/null && return 0; } ||
        { [[ -z "$TERMUX_VERSION" ]] && [[ -z "$XTERM_VERSION" ]] && [[ -z "$LESS_IMG" || "$LESS_IMG" == 1 ]] && cmd_check img2sixel libsixel &&
        img2sixel -w "${LESS_IMG_SIXEL_W:-1000}" -h "${LESS_IMG_SIXEL_H:-950}" "${file}" 2>/dev/null && return 0; } ||
        { [[ -z "$LESS_IMG" || "$LESS_IMG" == 2 ]] && 
        cmd_check viu viu && viu -w "${LESS_IMG_VIU_W:-200}" -h "${LESS_IMG_VIU_H:-80}" "${file}" 2>/dev/null && return 0; } ||
        { [[ -z "$LESS_IMG" || "$LESS_IMG" == 3 ]] && cmd_check catimg catimg &&
        catimg -w "${LESS_IMG_CATIMG_W:-150}" "${file}" 2>/dev/null && return 0; } ||
        { [[ -z "$LESS_IMG" || "$LESS_IMG" == 4 ]] && cmd_check chafa chafa &&
        chafa -s "${LESS_IMG_CHAFA_S:-70}" "${file}" 2>/dev/null && return 0; } ||
        { cmd_check -msg && echo && any_file "$file" && return 1; }
    fi
}

reset_terminal() {
    clear
    # Show the cursor again
    printf '\e[?7h\e[?25h\e[;r\e[?1049l'
    # Clean up temporary directory if it exists
    [[ -d "$TMP_DIR" ]] && rm -rf "$TMP_DIR"
    # Restore terminal settings
    stty echo </dev/tty >/dev/null 2>/dev/null
    exit
}

# Hide the cursor
printf '\e[?25l'

# Disable echo for key presses
stty -echo </dev/tty >/dev/null 2>/dev/null

# Display the first image
imgview

keys() {
    # Read user input
    read -rsn 1 key </dev/tty >/dev/null 2>/dev/null

    # Check if the key is an arrow (starts with \e)
    if [[ "$key" == $'\e' ]]; then
        read -rsn 2 -t 0.1 key2 </dev/tty >/dev/null 2>/dev/null
        key="$key$key2"
    fi

    case "$key" in
        w|$'\e[A') # Up (previous image)
            if (( index > 0 )); then
                ((index--))
                imgview
            fi
            ;;
        s|$'\e[B') # Down (next image)
            if (( index < ${#images[@]} - 1 )); then
                ((index++))
                imgview
            fi
            ;;
        q|Q) # Quit
            # Re-enable echo for key presses
            reset_terminal
            ;;
    esac
}

loop() {    
    # Pagination loop
    while true; do
        total_page=${#images[@]}
        current_page=$((index + 1))
        printf '\e7\e[999H\e[K%b%s%b\e8' "$INFO_COL" "Page: $current_page/$total_page | Up: up or w | Down: down or s | Quit: q" "$NC"
            
        keys
        [[ -t 1 ]] || reset_terminal
    done
}

main() {
    trap 'reset_terminal' SIGINT SIGTERM SIGHUP SIGQUIT SIGABRT EXIT

    loop &
    loop_pid=$!
    wait "$loop_pid"
}

main