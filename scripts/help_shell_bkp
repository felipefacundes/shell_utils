#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
This Bash script serves as a dynamic help utility for various shell functions defined in separate scripts. 
It allows users to search for functions, view their descriptions, and execute them interactively. 
The script also provides usage instructions and handles help requests through command-line arguments.
DOCUMENTATION

# Define your functions below
# Add as many functions as you like in a similar manner
shell_utils=~/.shell_utils
helps_dir="${shell_utils}/scripts/helps"

shopt -s globstar
source "${shell_utils}/variables/shell_colors.sh"

for file in "${helps_dir}"/**/*.sh; do
    source "${file}"
done

# Display help dynamically
help() {
    echo "Usage: ${0##*/} [function1 function2 ...]"
    echo -e "\n-h, --help,"
    echo -e "
# Display this help message.
"
    echo -e "Available functions:\n"
 
    for func_name in $(declare -F | cut -d " " -f 3); do
        # Extract the first comment line of the function
        description=$(type "$func_name" | grep -m 1 '^#')  # Or | awk '/^#/ {print; exit}' or | sed -n '/^#/p' | head -n 1
        # Remove the '#' character from the description
        description=${description/#\# /}
        echo -e "  ${func_name} <=> $description"
    done

    echo -e "\nEnter q to quit this help.\n"
}

# Check if help option was provided
if [[ "$1" == "-h" || "$1" == "--help" ]]; then
    help | less -i -R
    exit 0
fi

if [[ -z "$1" ]]; then
    while true; do
        # Initialize an empty array to hold the menu items
        menu_items=()

        # Ask the user for a search term
        search_term=$(whiptail --inputbox "Enter a search term (leave blank to list all functions):" 8 78 3>&1 1>&2 2>&3)

        # If the user pressed Cancel, break the loop
        if [[ $? -ne 0 ]]; then
            break
        fi

        for func_name in $(declare -F | cut -d " " -f 3); do
            # Extract the first comment line of the function
            description=$(type "$func_name" | grep -m 1 '^#')  # Or | awk '/^#/ {print; exit}' or | sed -n '/^#/p' | head -n 1
            # Remove the '#' character from the description
            description=${description/#\# /}
            # If the function name or description matches the search term, add it to the menu items
            if [[ -z "$search_term" || "$func_name" == *"$search_term"* || "$description" == *"$search_term"* ]]; then
                menu_items+=("$func_name" "| $description")
            fi
        done

        # Pass the menu items to whiptail and get the selected item
        selected_item=$(whiptail --title "Functions menu" --menu "choose a function" 24 80 17 "${menu_items[@]}" 3>&1 1>&2 2>&3)

        # If the user pressed Cancel, break the loop
        if [[ $? -ne 0 ]]; then
            break
        fi

        # Check if the selected item is a function
        if declare -f "$selected_item" > /dev/null; then
            clear
            # Call the function
            "$selected_item"
            break
        else
            echo "Function '$selected_item' not found."
        fi
    done
    exit 0
fi

# Iterate over the passed arguments
for func_name in "$@"; do
    # Check if the function exists
    if declare -f "$func_name" > /dev/null; then
        # Call the function
        "$func_name"
    else
        echo "Function '$func_name' not found."
    fi
done

# Example script invocation:
# ./your_script.sh function1 function2
