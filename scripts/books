#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes


: <<'DOCUMENTATION'
This Bash script is designed to manage and display a list of books stored in a specified directory, allowing users to read them in various formats.

Purpose:
The script provides a user-friendly interface for selecting and reading books in formats such as PDF, TXT, and EPUB.

Strengths:
1. Format Support: Handles multiple book formats (PDF, TXT, EPUB).
2. User  Interaction: Prompts users to select a book by number, enhancing usability.
3. Error Handling: Includes checks for valid input and format recognition.
4. Temporary File Management: Converts PDF files to text for easier reading.
5. Clear Output: Uses 'less' for paginated viewing of book content.

Capabilities:
- Lists available books in the specified directory.
- Reads and displays the content of selected books based on their format.
- Provides a clean exit option for users.
DOCUMENTATION

clear

SCRIPT="${0##*/}"
TMPDIR="${TMPDIR:-/tmp}"
TMPBOOKDIR="${TMPDIR}/${SCRIPT%.*}"
XDG_DOCUMENTS_DIR=${XDG_DOCUMENTS_DIR:-$(xdg-user-dir DOCUMENTS 2>/dev/null || echo "$HOME/Documents")}

# Setting the eBook folders
books_folder="${HOME}/.shell_utils/books"
xdg_books_folder="${XDG_DOCUMENTS_DIR}/Books"

[[ ! -d "${TMPBOOKDIR}" ]] && mkdir -p "${TMPBOOKDIR}"
[[ ! -d "${xdg_books_folder}" ]] && mkdir -p "${xdg_books_folder}"

# Combining the two folders to get all ebooks
books_list=("${books_folder}"/*.* "${xdg_books_folder}"/*.*)

# ANSI color for highlighting the selected book
red="\033[1;31m"
highlight="\033[44;1;32m"  # Cyan background, bold green text
nc="\033[0m"  # Reset

# Function to display books list
display_books() {
    local list=()
    if [[ -n "$1" ]]; then
        list=("${filtered_books[@]}")
    else
        list=("${books_list[@]}")
    fi
    
    number=0
    for book in "${list[@]}"; do
        if [[ $number -eq $selected ]]; then
            echo -e "$highlight$number)    ${book}$nc"
        else
            echo -e "$number)    ${book}"
        fi
        ((number++)) || true
    done
}

markdown_reader() {
    ~/.shell_utils/scripts/markdown_reader.sh "$@"
}

cmd_check() {
    [[ "${#no_cmd[*]}" -gt 1 ]] && msg=$(echo "${no_cmd[*]}" | awk 'BEGIN {first=1} {for (i=1; i<=NF; i++) \
    {if (first) {printf "%s", $i; first=0} else {printf " or %s", $i}}} END {print ""}') || msg="${no_cmd[*]}"
    [[ "$1" == "-msg" ]] && echo "Install ${msg}" && exit 1
    ! command -v "$1" 1>/dev/null && no_cmd+=(\""$2"\") && return 1 || return 0
}

margin() {
    cmd_check fold coreutils || cmd_check -msg
    cmd_check awk gawk || cmd_check -msg
    cmd_check less less || cmd_check -msg
    #fold -w 150 "$1" | sed 's/^/          /' | less -i
    fold -w 150 "$1" | awk '{print "          " $0 "          "}' | less -i
}

libre_office_convert() {
    local file="$1"
    local temp_dir="${TMPBOOKDIR}/temp_book"
    [[ -d "${temp_dir}" ]] && rm -rf "${temp_dir}"
    cmd_check libreoffice libreoffice && libreoffice --headless --convert-to txt --outdir "${temp_dir}" "$file" >/dev/null 2>&1 \
    && margin "${temp_dir}"/*.txt && return 0 || cmd_check -msg
}

nexttmp () {
	declare new="${TMPBOOKDIR}/books.$RANDOM"
	echo "$new"
}

nodash() {
	prog="$1"
	shift
	[[ "$1" == - ]] && shift
	$prog "$@"
}

handle_w3m() {
	if [[ "$1" == *\?* ]]; then
		t=$(nexttmp)
		ln -s "$1" "$t"
		set "$t" "$1"
	fi
	nodash "w3m -dump -T text/html" "$1"
}

ishtml() {
	[[ $1 == - ]] && arg1=-stdin || arg1="$1"
	htmlopt=--unicode-snob
	cmd_check html2text python-html2text && html2text -utf8 </dev/null 2>/dev/null && htmlopt=-utf8
	# 3 lines following can easily be reshuffled according to the preferred tool
	cmd_check elinks elinks && nodash "elinks -dump -force-html" "$1" && return ||
	cmd_check w3m w3m && handle_w3m "$1" && return ||
	cmd_check lynx lynx && lynx -force_html -dump "$arg1" && return ||
	# different versions of html2text existingi, force unicode
	[[ "$1" == https://* ]] && return ||
	cmd_check html2text python-html2text && nodash html2text "$htmlopt" "$1" | less -i || cmd_check -msg
}

# Function to select and open a book
select_book() {
    local book_path="$1"
    
    if [[ -z "$book_path" ]]; then
        local list=()
        if [[ -n "$search_term" ]]; then
            list=("${filtered_books[@]}")
        else
            list=("${books_list[@]}")
        fi
        book_path="${list[$selected]}"
    fi
    
    ext_test="${book_path##*.}"

    if [[ "${ext_test}" =~ ^([Mm][Dd])$ ]]; then
        markdown_reader "$book_path"
    elif [[ "${ext_test}" =~ ^([Oo][Dd][Tt])$ ]]; then
        libre_office_convert "$book_path"
    elif [[ "${ext_test}" =~ ^([Rr][Tt][Ff])$ ]]; then
        libre_office_convert "$book_path"
    elif [[ "${ext_test}" =~ ^([Xx][Mm][Ll])$ ]]; then
        ishtml "$book_path"
    elif [[ "${ext_test}" =~ ^([Hh][Tt][Mm])$ ]]; then
        ishtml "$book_path"
    elif [[ "${ext_test}" =~ ^([Hh][Tt][Mm][Ll])$ ]]; then
        ishtml "$book_path"
    elif [[ "${ext_test}" =~ ^([Dd][Oo][Cc][Xx])$ ]]; then
        libre_office_convert "$book_path"
    elif [[ "${ext_test}" =~ ^([Dd][Oo][Cc])$ ]]; then
        libre_office_convert "$book_path"
    elif [[ "${ext_test}" =~ ^([Tt][Xx][Tt])$ ]]; then
        margin "$book_path"
    elif [[ "${ext_test}" =~ ^([Ee][Pp][Uu][Bb])$ ]]; then
        cmd_check epr epr && epr "$book_path" 2>/dev/null && return 0 || cmd_check -msg
    elif [[ "${ext_test}" =~ ^([Pp][Dd][Ff])$ ]]; then
        declare -l temp_file="${TMPBOOKDIR}/temp_book.txt"
        [[ -f "${temp_file}" ]] && rm "${temp_file}"
        rm -f "${temp_file}"
        cmd_check pdftotext poppler && pdftotext -layout -nopgbrk "$book_path" "${temp_file}" 1>/dev/null && return 0 || cmd_check -msg
        margin "${temp_file}"
    else
        echo 'Unrecognized format'
    fi
}

# Check if a book was provided as an argument
if [[ -n "$1" ]]; then
    select_book "$1"
    exit 0
fi

# Interactive navigation
selected=0
esc=$'\e'
up=$'\e[A'
down=$'\e[B'
search_term=""
filtered_books=()

temp_search_results="${TMPBOOKDIR}/grep_search_results.txt"

while true; do
    clear
    echo -e "\nUse ↑/↓ or w/s to navigate, Enter to select a book, 'f' to find by name, 'g' to grep content.\n"
    display_books "$search_term"
    echo -e "\nOr use 'q' to exit."

    IFS= read -rsn1 key  # Read first character

    if [[ "$key" == "$esc" ]]; then
        IFS= read -rsn2 rest
        key+="$rest"
    fi

    case "$key" in
        w|W|"$up")
            if [[ "$selected" -gt 0 ]]; then
                selected=$((selected - 1))
            fi
            ;;
        s|S|"$down")
            if [[ "$selected" -lt $((${#books_list[@]} - 1)) ]]; then
                selected=$((selected + 1))
            fi
            ;;
        f|F)
            echo -e "\nEnter search term: "
            read -r search_term
            mapfile -t filtered_books < <(find "$books_folder" "$xdg_books_folder" -type f -iname "*${search_term}*" -print0 2>/dev/null | xargs -0 -n1 echo)
            selected=0
            ;;
        g|G)
            echo -e "\nEnter content search term: "
            read -r search_term
            grep -irl "$search_term" "$books_folder" "$xdg_books_folder" > "$temp_search_results" 2>/dev/null
            mapfile -t filtered_books < "$temp_search_results"
            selected=0
            ;;
        "")
            break
            ;;
        q|Q)
            exit 0
            ;;
        *)
            echo -e "\n${red}Invalid key!${nc}"
            sleep 2
            ;;
    esac

done

# Display the selected book with highlight
clear
if [[ -n "$search_term" ]]; then
    echo -e "$highlight You selected: ${filtered_books[$selected]} $nc"
else
    echo -e "$highlight You selected: ${books_list[$selected]} $nc"
fi
select_book
