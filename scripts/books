#!/bin/bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
This Bash script is designed to manage and display a list of books stored in a specified directory, allowing users to read them in various formats.

Purpose:
The script provides a user-friendly interface for selecting and reading books in formats such as PDF, TXT, and EPUB.

Strengths:
1. Format Support: Handles multiple book formats (PDF, TXT, EPUB).
2. User  Interaction: Prompts users to select a book by number, enhancing usability.
3. Error Handling: Includes checks for valid input and format recognition.
4. Temporary File Management: Converts PDF files to text for easier reading.
5. Clear Output: Uses 'less' for paginated viewing of book content.

Capabilities:
- Lists available books in the specified directory.
- Reads and displays the content of selected books based on their format.
- Provides a clean exit option for users.
DOCUMENTATION

clear

TMPDIR="${TMPDIR:-/tmp}"
XDG_DOCUMENTS_DIR=${XDG_DOCUMENTS_DIR:-$(xdg-user-dir DOCUMENTS 2>/dev/null || echo "$HOME/Documents")}

# Setting the eBook folders
books_folder="${HOME}/.shell_utils/books"
xdg_books_folder="${XDG_DOCUMENTS_DIR}/Books"

[[ ! -d "${xdg_books_folder}" ]] && mkdir -p "${xdg_books_folder}"

# Combining the two folders to get all ebooks
books_list=("${books_folder}"/*.* "${xdg_books_folder}"/*.*)

# ANSI color for highlighting the selected book
red="\033[1;31m"
highlight="\033[44;1;32m"  # Cyan background, bold green text
nc="\033[0m"  # Reset

# Function to display books list
books_list_func() {
    number=0
    for list in "${books_list[@]}"; do
        if [[ $number -eq $selected ]]; then
            # Highlight the selected book
            echo -e "$highlight$number)    ${list}$nc"
        else
            # Display other books normally
            echo -e "$number)    ${list}"
        fi
        ((number++)) || true
    done
}

# Interactive book selection
select_book(){
    #read -r book

    if [[ "${book}" -ge 0 && "${book}" -lt "${#books_list[@]}" ]]; then
        declare -l ext_test
        
        # Uses `awk` to split the string by the dot and capture the last part (extension).
        #ext_test=$(echo "${books_list[book]}" | awk -F. '{print $NF}')

        # Uses Bash parameter expansion to capture everything after the last dot, without external utilities.
        #ext_test="${books_list[book]##*.}"

        # Ensures the value of the variable is handled correctly with spaces, using quotes to preserve the full filename.
        ext_test="${books_list[$selected]##*.}"

        if [[ "${ext_test}" == [Tt][Xx][Tt] ]]; then
            cat "${books_list[$selected]}" | less -i -R
        elif [[ "${ext_test}" == [Ee][Pp][Uu][Bb] ]]; then
            epr "${books_list[$selected]}"
        elif [[ "${ext_test}" == [Pp][Dd][Ff] ]]; then
            rm -f "${TMPDIR}/temp_book.txt"
            pdftotext -layout -nopgbrk "${books_list[$selected]}" "${TMPDIR}/temp_book.txt"
            cat "${TMPDIR}/temp_book.txt" | less -i -R
        else
            echo 'Unrecognized format'
        fi
    else
        echo -e "\nerror: \"${selected}\" is not a valid number!"
    fi
}

# Interactive navigation with arrow keys (up/down) or w/s
selected=0
esc=$'\e'
up=$'\e[A'
down=$'\e[B'

while true; do
    clear
    echo -e "\nUse ↑/↓ or w/s to navigate, Enter to select a book.\n"
    books_list_func
    echo -e "\nEnter the number corresponding to the book. And then press ENTER."
    echo -e "\nOr use 'q' or 'e' to exit."

    IFS= read -rsn1 key  # Read first character

    if [[ "$key" == "$esc" ]]; then
        # Get the rest of the escape sequence (2 more characters)
        IFS= read -rsn2 rest
        key+="$rest"
    fi

    case "$key" in
        w|W|"$up")  # W or Up Arrow to move up
            if [[ "$selected" -gt 0 ]]; then
                selected=$((selected - 1))
            fi
            ;;
        s|S|"$down")  # S or Down Arrow to move down
            if [[ "$selected" -lt $((${#books_list[@]} - 1)) ]]; then
                selected=$((selected + 1))
            fi
            ;;
        "")  # Enter to select
            break
            ;;
        q|Q)  # Enter to select
            exit 0
            ;;
        *)   # Any other key
            echo -e "\n${red}Invalid key!${nc}"
            sleep 2
            ;;
    esac
done

# Display the selected book with highlight
clear
echo -e "$highlight You selected: ${books_list[$selected]} $nc"
select_book
