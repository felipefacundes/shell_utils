#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
This script is to fix the mouse cursor theme.
# Cursor Theme fix for WMs: openbox, i3 and more...
# How to use lxappearance. No stress.
DOCUMENTATION

# Define a signal handler to capture SIGINT (Ctrl+C)
trap 'kill -TERM -- -$$' INT #SIGHUP #SIGINT #SIGQUIT #SIGABRT #SIGKILL #SIGALRM #SIGTERM

XRESOURCES=~/.Xresources
XSETTINGSD=~/.config/xsettingsd/xsettingsd.conf
GTK3_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-3.0/settings.ini"
GTK4_RC_FILES="${XDG_CONFIG_HOME:-$HOME/.config}/gtk-4.0/settings.ini"
GTK2_RC_FILES="${HOME}/.gtkrc-2.0" #"${HOME}/.gtkrc-2.0:${XDG_CONFIG_HOME}/gtk-2.0/gtkrc:/etc/gtk-2.0/gtkrc"

GTKBASE="${GTKBASE:-gtk2}"

if [[ ${GTKBASE,,} == "gtk2" ]]; then
	GTK_RC_BASE="$GTK2_RC_FILES"
elif [[ ${GTKBASE,,} == "gtk3" ]]; then
	GTK_RC_BASE="$GTK3_RC_FILES"
fi

MD5SUM_BASE=$(md5sum "$GTK_RC_BASE")

delay=2.0

doc() {
	less -FX "$0" | head -n8 | tail -n3
	echo
}

help() {
    doc
    echo -e "\033[1mUSAGE:\033[0m"
    echo "  ${0##*/} [OPTIONS]"
    echo
    echo -e "\033[1mDESCRIPTION:\033[0m"
    echo "  This script fixes mouse cursor theme and GTK settings across different"
    echo "  window managers and desktop environments. It provides continuous"
    echo "  monitoring and automatic correction of theme settings."
    echo
    echo -e "\033[1mOPTIONS:\033[0m"
    echo "  -o              Run only the X resources database (xrdb) fix loop"
    echo "  -t              Run cursor theme and GTK theme fix loop (monitors changes)"
    echo "  -gtk2           Force use GTK2 as base configuration (default)"
    echo "  -gtk3           Force use GTK3 as base configuration"
    echo "  -h, --help      Show this help message"
    echo
    echo -e "\033[1mCONFIGURATION:\033[0m"
    echo "  The script uses the following configuration files:"
    echo "  • GTK2: ~/.gtkrc-2.0"
    echo "  • GTK3: ~/.config/gtk-3.0/settings.ini"
    echo "  • GTK4: ~/.config/gtk-4.0/settings.ini"
    echo "  • XResources: ~/.Xresources"
    echo "  • xsettingsd: ~/.config/xsettingsd/xsettingsd.conf"
    echo
    echo -e "\033[1mENVIRONMENT VARIABLES:\033[0m"
    echo "  GTKBASE         Sets which GTK version to use as base configuration"
    echo "                  (gtk2 or gtk3, default: gtk2)"
    echo
    echo -e "\033[1mSUPPORTED WINDOW MANAGERS:\033[0m"
    echo "  The script can automatically restart these WMs when needed:"
    echo "  awesome, bspwm, dwm, fluxbox, herbstluftwm, i3, openbox, qtile,"
    echo "  sway, xmonad, spectrwm, fvwm, icewm, pekwm, wayfire, hyprland, labwc"
    echo
    echo -e "\033[1mNOTES:\033[0m"
    echo "  • The script runs continuously by default (use Ctrl+C to stop)"
    echo "  • For best results, use with lxappearance to configure themes"
    echo "  • Requires xsettingsd for proper GTK theme application in some WMs"
    echo
    echo -e "\033[1mEXAMPLES:\033[0m"
    echo "  ${0##*/} -t          # Monitor and fix themes continuously"
    echo "  ${0##*/} -o          # Only fix X resources continuously"
    echo "  GTKBASE=gtk3 ${0##*/} -t  # Use GTK3 settings as base"
}

xsetroot -cursor_name left_ptr >/dev/null 2>&1
xrdb -merge "${XRESOURCES}" >/dev/null 2>&1

only_xrdb() {
	while true
	do 
		xrdb "${XRESOURCES}" > /dev/null 2>&1
		xrdb -merge "${XRESOURCES}" > /dev/null 2>&1
		xsetroot -cursor_name left_ptr > /dev/null 2>&1

		sleep "$delay"
	done
}

reload_wm() {
	if pgrep -x "awesome" >/dev/null; then
		awesome-client 'awesome.restart()'
	elif pgrep -x "bspwm" >/dev/null; then
		bspc wm -r
	elif pgrep -x "dwm" >/dev/null; then
		pkill -USR1 -x dwm
	elif pgrep -x "fluxbox" >/dev/null; then
		fluxbox-remote restart
	elif pgrep -x "herbstluftwm" >/dev/null; then
		herbstclient reload
	elif pgrep -x "i3" >/dev/null; then
		i3-msg restart
	elif pgrep -x "openbox" >/dev/null; then
		openbox --reconfigure
	elif pgrep -x "qtile" >/dev/null; then
		qtile cmd-obj -o cmd -f restart
	elif pgrep -x "sway" >/dev/null; then
		swaymsg reload
	elif pgrep -x "xmonad" >/dev/null; then
		pkill -USR1 -x xmonad
	elif pgrep -x "spectrwm" >/dev/null; then
		spectrwm -r
	elif pgrep -x "fvwm" >/dev/null; then
		fvwm -r
	elif pgrep -x "icewm" >/dev/null; then
		icewm -r
	elif pgrep -x "pekwm" >/dev/null; then
		pekwm --replace
	elif pgrep -x "sway" >/dev/null; then
		swaymsg reload
	elif pgrep -x "wayfire" >/dev/null; then
		wayfire -r
	elif pgrep -x "hyprland" >/dev/null; then
		hyprctl reload
	elif pgrep -x "labwc" >/dev/null; then
		labwc -r
	elif pgrep -x "wmutils" >/dev/null; then
		notify-send "WM Utils" "Necessary manual restart"
	else
		notify-send "WM Restart" "WM's necessary manual restart"
		return 1
	fi
}

exec_reload_wm() {
	reload_wm &
	rwm_pid=$!
	wait "$rwm_pid"
}

reload_gtk() {
	# Try to recharge the gnome shell via d-bus (useful in gnome environments)
	if dbus-send --session --type=method_call --dest=org.gnome.Shell /org/gnome/Shell org.gnome.Shell.Eval string:'global.reexec_self()' >/dev/null 2>&1; then
		echo "Gnome shell recharged via d-bus."
	else
		# Fallback: Sends Sighup to GTK processes (useful in WMS like Awesome/OpenBox/Sway)
		echo "Recharging GTK processes via SIGHUP ..."
		pkill -HUP -f "gtk"
		pkill -HUP -f "gtk3" 
		pkill -HUP -f "gtk4" 
		pkill -HUP -f gtk3-nocsd
		pkill -9 -f rofi
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-modules >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-xft-rgba >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-font-name >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-theme-name >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-menu-images >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-xft-hinting >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-xft-hintstyle >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-toolbar-style >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-button-images >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-xft-antialias >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-icon-theme-name >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-cursor-theme-name >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-cursor-theme-size >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-toolbar-icon-size >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-enable-event-sounds >/dev/null 2>&1
		dbus-send --session --type=signal / org.gtk.SettingsChanged string:gtk-enable-input-feedback-sounds >/dev/null 2>&1
	fi
}

if_xsettingsd() {
	if command -v xsettingsd >/dev/null; then
		pkill -9 xsettingsd 2>/dev/null
		xsettingsd 2>/dev/null >/dev/null & disown
	else
		notify-send "Install xsettingsd"
	fi
}

qt_themes() {
	export QT_STYLE_OVERRIDE=gtk2  
	export QT_QPA_PLATFORMTHEME=gtk2 
	export XCURSOR_THEME="$XCURSOR_THEME"
	export XCURSOR_SIZE="$XCURSOR_SIZE"
	qt5ct --apply 2>/dev/null
	qt6ct --apply 2>/dev/null
}

update_themes() {
	# GTK Theme
	sed -i "/gtk-theme-name/c\gtk-theme-name=${GTK_THEME}" "${GTK3_RC_FILES}"
	sed -i "/gtk-theme-name/c\gtk-theme-name=\"${GTK_THEME}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-theme-name/c\gtk-theme-name=${GTK_THEME}" "${GTK4_RC_FILES}"
	sed -i "/Net\/ThemeName/c\Net\/ThemeName \"${GTK_THEME}\"" "${XSETTINGSD}"
	# Cursor Theme
	sed -i "/^Xcursor\.theme/c\Xcursor.theme: ${XCURSOR_THEME}" "${XRESOURCES}"
	sed -i "/Gtk\/CursorThemeName/c\Gtk\/CursorThemeName \"${XCURSOR_THEME}\"" "${XSETTINGSD}"
	sed -i "/gtk-cursor-theme-name/c\gtk-cursor-theme-name=${XCURSOR_THEME}" "${GTK3_RC_FILES}"
	sed -i "/gtk-cursor-theme-name/c\gtk-cursor-theme-name=\"${XCURSOR_THEME}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-cursor-theme-name/c\gtk-cursor-theme-name=${XCURSOR_THEME}" "${GTK4_RC_FILES}"
	# Cursor size
	sed -i "/^Xcursor\.size/c\Xcursor.size: ${XCURSOR_SIZE}" "${XRESOURCES}"
	sed -i "/Gtk\/CursorThemeSize/c\Gtk\/CursorThemeSize ${XCURSOR_SIZE}" "${XSETTINGSD}"
	sed -i "/gtk-cursor-theme-size/c\gtk-cursor-theme-size=${XCURSOR_SIZE}" "${GTK3_RC_FILES}"
	sed -i "/gtk-cursor-theme-size/c\gtk-cursor-theme-size=${XCURSOR_SIZE}" "${GTK2_RC_FILES}"
	sed -i "/gtk-cursor-theme-size/c\gtk-cursor-theme-size=${XCURSOR_SIZE}" "${GTK4_RC_FILES}"
	# Icon theme
	sed -i "/Net\/IconThemeName/c\Net\/IconThemeName \"${icon_theme}\"" "${XSETTINGSD}"
	sed -i "/gtk-icon-theme-name/c\gtk-icon-theme-name=${icon_theme}" "${GTK3_RC_FILES}"
	sed -i "/gtk-icon-theme-name/c\gtk-icon-theme-name=\"${icon_theme}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-icon-theme-name/c\gtk-icon-theme-name=${icon_theme}" "${GTK4_RC_FILES}"
	# GTK Font 
	sed -i "/gtk-font-name/c\gtk-font-name=${font_name}" "${GTK3_RC_FILES}"
	sed -i "/gtk-font-name/c\gtk-font-name=\"${font_name}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-font-name/c\gtk-font-name=${font_name}" "${GTK4_RC_FILES}"
	sed -i "/Gtk\/FontName/c\Gtk\/FontName \"${font_name}\"" "${XSETTINGSD}"
	sed -i "/Xft\/Hinting/c\Xft\/Hinting \"${hinting}\"" "${XSETTINGSD}"
	sed -i "/gtk-xft-hinting/c\gtk-xft-hinting=${hinting}" "${GTK3_RC_FILES}"
	sed -i "/gtk-xft-hinting/c\gtk-xft-hinting=${hinting}" "${GTK2_RC_FILES}"
	sed -i "/gtk-xft-hinting/c\gtk-xft-hinting=${hinting}" "${GTK4_RC_FILES}"
	sed -i "/Xft\/HintStyle/c\Xft\/HintStyle \"${hintstyle}\"" "${XSETTINGSD}"
	sed -i "/gtk-xft-hintstyle/c\gtk-xft-hintstyle=${hintstyle}" "${GTK3_RC_FILES}"
	sed -i "/gtk-xft-hintstyle/c\gtk-xft-hintstyle=\"${hintstyle}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-xft-hintstyle/c\gtk-xft-hintstyle=${hintstyle}" "${GTK4_RC_FILES}"
	sed -i "/Xft\/Antialias/c\Xft\/Antialias \"${antialias}\"" "${XSETTINGSD}"
	sed -i "/gtk-xft-antialias/c\gtk-xft-antialias=${antialias}" "${GTK3_RC_FILES}"
	sed -i "/gtk-xft-antialias/c\gtk-xft-antialias=${antialias}" "${GTK2_RC_FILES}"
	sed -i "/gtk-xft-antialias/c\gtk-xft-antialias=${antialias}" "${GTK4_RC_FILES}"
	sed -i "/Xft\/RGBA/c\Xft\/RGBA \"${rgba}\"" "${XSETTINGSD}"
	sed -i "/gtk-xft-rgba/c\gtk-xft-rgba=${rgba}" "${GTK3_RC_FILES}"
	sed -i "/gtk-xft-rgba/c\gtk-xft-rgba=\"${rgba}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-xft-rgba/c\gtk-xft-rgba=${rgba}" "${GTK4_RC_FILES}"
	# GTK Others
	sed -i "/gtk-modules/c\gtk-modules=${GTK_MODULES}" "${GTK3_RC_FILES}"
	sed -i "/gtk-modules/c\gtk-modules=\"${GTK_MODULES}\"" "${GTK2_RC_FILES}"
	sed -i "/gtk-menu-images/c\gtk-menu-images=${menu_images}" "${GTK3_RC_FILES}"
	sed -i "/gtk-menu-images/c\gtk-menu-images=${menu_images}" "${GTK2_RC_FILES}"
	sed -i "/gtk-button-images/c\gtk-button-images=${button_images}" "${GTK3_RC_FILES}"
	sed -i "/gtk-button-images/c\gtk-button-images=${button_images}" "${GTK2_RC_FILES}"
	sed -i "/gtk-toolbar-style/c\gtk-toolbar-style=${toolbar_style}" "${GTK3_RC_FILES}"
	sed -i "/gtk-toolbar-style/c\gtk-toolbar-style=${toolbar_style}" "${GTK2_RC_FILES}"
	sed -i "/gtk-toolbar-icon-size/c\gtk-toolbar-icon-size=${toolbar_icon_size}" "${GTK3_RC_FILES}"
	sed -i "/gtk-toolbar-icon-size/c\gtk-toolbar-icon-size=${toolbar_icon_size}" "${GTK2_RC_FILES}"
	sed -i "/gtk-enable-event-sounds/c\gtk-enable-event-sounds=${feedback_sounds}" "${GTK3_RC_FILES}"
	sed -i "/gtk-enable-event-sounds/c\gtk-enable-event-sounds=${feedback_sounds}" "${GTK2_RC_FILES}"
	sed -i "/gtk-enable-event-sounds/c\gtk-enable-event-sounds=${feedback_sounds}" "${GTK4_RC_FILES}"
	sed -i "/gtk-enable-input-feedback-sounds/c\gtk-enable-input-feedback-sounds=${event_sounds}" "${GTK3_RC_FILES}"
	sed -i "/gtk-enable-input-feedback-sounds/c\gtk-enable-input-feedback-sounds=${event_sounds}" "${GTK2_RC_FILES}"
	sed -i "/gtk-enable-input-feedback-sounds/c\gtk-enable-input-feedback-sounds=${event_sounds}" "${GTK4_RC_FILES}"

	xrdb "${XRESOURCES}" > /dev/null 2>&1
	xrdb -merge "${XRESOURCES}"> /dev/null 2>&1
	xsetroot -cursor_name left_ptr > /dev/null 2>&1
	gsettings set "${gnome_schema}" gtk-theme "${GTK_THEME}"
	gsettings set "${gnome_schema}" font-name "${font_name}"
	gsettings set "${gnome_schema}" icon-theme "${icon_theme}"
	gsettings set "${gnome_schema}" cursor-theme "${XCURSOR_THEME}"
	gsettings reset org.gnome.desktop.interface gtk-theme
	gsettings set org.gnome.desktop.interface gtk-theme "${GTK_THEME}"
	gsettings set org.gnome.desktop.interface cursor-theme "${XCURSOR_THEME}"
	export GTK_THEME="$GTK_THEME"
	if_xsettingsd
	reload_gtk
	qt_themes
	xrefresh
}

seq_fix() {
	for ((i=1; i<="$1"; i++))
	do
		"$2" & disown
		{ sleep "$delay" && "$2"; } & disown
	done
}

cursor_theme_fix() {
	[[ ! -s "${XRESOURCES}" ]] && rm "${XRESOURCES}"
	[[ ! -f "${XRESOURCES}" ]] && wget -nc https://raw.githubusercontent.com/felipefacundes/dotfiles/master/config/.Xresources -O "${XRESOURCES}"
	[[ ! -d ~/.config/gtk-4.0/ ]] && mkdir -p ~/.config/gtk-4.0/

	[[ "${XDG_SESSION_TYPE,,}" == x11 ]] && ! pgrep -f xsettingsd >/dev/null && xsettingsd & disown

	while true
	do 
		GTK_THEME="$(awk -F'=' '/gtk-theme-name/ {print $2}' "${GTK_RC_BASE}" | xargs)"; export GTK_THEME
		GTK_MODULES="$(awk -F'=' '/gtk-modules/ {print $2}' "${GTK_RC_BASE}" | xargs)"; export GTK_MODULES
		XCURSOR_SIZE="$(awk -F'=' '/gtk-cursor-theme-size/ {print $2}' "${GTK_RC_BASE}" | xargs)"; export XCURSOR_SIZE
		XCURSOR_THEME="$(awk -F'=' '/gtk-cursor-theme-name/ {print $2}' "${GTK_RC_BASE}" | xargs)"; export XCURSOR_THEME

		xresources_xcursor_theme="$(grep -i 'Xcursor.theme:' "${XRESOURCES}" | sed -n 's/.*:\s*\(.*\)/\1/p')"
		xresources_xcursor_size="$(awk -F':' '/Xcursor.size:/ {print $2}' "${XRESOURCES}" | xargs)"

		feedback_sounds="$(awk -F'=' '/gtk-enable-input-feedback-sounds/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		toolbar_icon_size="$(awk -F'=' '/gtk-toolbar-icon-size/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		event_sounds="$(awk -F'=' '/gtk-enable-event-sounds/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		button_images="$(awk -F'=' '/gtk-button-images/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		toolbar_style="$(awk -F'=' '/gtk-toolbar-style/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		icon_theme="$(awk -F'=' '/gtk-icon-theme-name/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		hintstyle="$(awk -F'=' '/gtk-xft-hintstyle/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		antialias="$(awk -F'=' '/gtk-xft-antialias/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		menu_images="$(awk -F'=' '/gtk-menu-images/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		hinting="$(awk -F'=' '/gtk-xft-hinting/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		font_name="$(awk -F'=' '/gtk-font-name/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		rgba="$(awk -F'=' '/gtk-xft-rgba/ {print $2}' "${GTK_RC_BASE}" | xargs)"
		gnome_schema="org.gnome.desktop.interface"

		md5sum_base=$(md5sum "$GTK_RC_BASE")

		if [ "${MD5SUM_BASE}" != "${md5sum_base}" ] || { [ "${xresources_xcursor_theme}" != "${XCURSOR_THEME}" ] || [ "${xresources_xcursor_size}" != "${XCURSOR_SIZE}" ]; }; then
			seq_fix 1 update_themes
			seq_fix 1 exec_reload_wm
			MD5SUM_BASE="$md5sum_base"
		fi

		sleep "$delay"
	done
}

cursor_theme_fix_pid() {
	cursor_theme_fix &
	cursor_theme_fix_pid=$!
	wait "$cursor_theme_fix_pid"
}

if [[ -z "${1}" ]]; then
	help
	exit 0
fi

while [[ $# -gt 0 ]]; do
	case $1 in
		-o)
			only_xrdb
			shift
			continue
			;;
		-t)
			cursor_theme_fix_pid
			shift
			continue
			;;
		-gtk2)
			GTK_RC_BASE="$GTK2_RC_FILES"
			shift
			continue
			;;
		-gtk3)
			GTK_RC_BASE="$GTK3_RC_FILES"
			shift
			continue
			;;
		*)
			help
			break
			;;
	esac
done

# Wait for all child processes to finish
wait
