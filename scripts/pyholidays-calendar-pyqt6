#!/usr/bin/env python
# License: GPLv3
# Credits: Felipe Facundes

"""
The script implements a calendar application using PyQt6 that displays holidays based on the user's locale. 

Strengths:
1. Supports multiple languages by detecting the system language.
2. Displays holidays for the current year and the next ten years.
3. Highlights holidays in red with tooltips showing their names.

Capabilities:
- Customizable calendar interface.
- Integration with the 'holidays' library for accurate holiday data.
- User-friendly layout with a clear display of the current language.

Dependencies:
1. 'PyQt6' - Third-party library for creating the GUI (install via pip).
2. 'holidays' - Third-party library for holiday data (install via pip).
3. 'sys' - Native library for system-specific parameters and functions (no installation needed).
4. 'locale' - Native library for locale-specific settings (no installation needed).

Installation of Dependencies:
- Install 'PyQt6' and 'holidays' using pip:
  
  pip install PyQt6 holidays
"""

import sys
from PyQt6.QtWidgets import QApplication, QMainWindow, QCalendarWidget, QLabel, QVBoxLayout, QWidget
from PyQt6.QtCore import QLocale, Qt, QDate, QTranslator
import holidays
import locale

country = locale.getlocale()[0].split("_")[1].upper()

class CalendarApp(QMainWindow):
    def __init__(self):
        super().__init__()
        self.initUI()

    def initUI(self):
        self.setWindowTitle("Calendar")
        self.setGeometry(100, 100, 400, 300)

        # Get system language
        system_language = QLocale.system().name()

        # Create translator for system language
        translator = QTranslator()
        translator.load(system_language)

        # Set the language for the app
        QApplication.installTranslator(translator)

        # Set the language for the calendar
        locale = QLocale(system_language)
        self.calendar = QCalendarWidget()
        self.calendar.setLocale(locale)
        self.calendar.setVerticalHeaderFormat(QCalendarWidget.VerticalHeaderFormat.NoVerticalHeader)
        self.calendar.setGridVisible(True)
        self.update_calendar()

        # Set label to display calendar language
        locale_language = QLocale.languageToString(locale.language())
        self.language_label = QLabel(f"{locale_language}")
        self.language_label.setAlignment(Qt.AlignmentFlag.AlignCenter)

        # Vertical layout for organizing calendar and label
        layout = QVBoxLayout()
        layout.addWidget(self.language_label)
        layout.addWidget(self.calendar)

        # Central widget for the layout
        central_widget = QWidget()
        central_widget.setLayout(layout)
        self.setCentralWidget(central_widget)

        self.show()

    def update_calendar(self):
        # Get the holidays for the current year and the next 10 years in the country
        current_year = int(QDate.currentDate().toString("yyyy"))
        end_year = current_year + 10
        country_holidays = holidays.CountryHoliday(country, years=range(current_year, end_year + 1))

        # Set holiday as special style in calendar
        for date, name in country_holidays.items():
            qdate = QDate(date.year, date.month, date.day)
            text_format = self.calendar.dateTextFormat(qdate)
            text_format.setForeground(Qt.GlobalColor.red)
            text_format.setToolTip(name)  # Add holiday name as tooltip
            text_format.setFontPointSize(12)  # Increase tooltip font size
            self.calendar.setDateTextFormat(qdate, text_format)
            self.calendar.setGridVisible(True)


def main():
    app = QApplication(sys.argv)
    window = CalendarApp()
    sys.exit(app.exec())

if __name__ == "__main__":
    main()