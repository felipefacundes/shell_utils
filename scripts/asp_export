#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Package name from argument
PACKAGE_NAME="$1"
SCRIPT_NAME="$0"

# Function to display help
show_help() {
    whiptail --title "Ajuda do Script" --msgbox "
USO: $SCRIPT_NAME \"nome_do_pacote\"

DESCRIÇÃO:
Este script automatiza o download de PKGBUILDs do Arch Linux.

FUNCIONALIDADES:
• Verifica se o diretório atual está vazio
• Cria pasta com nome do pacote se necessário
• Oferece opção entre pkgctl e git clone
• Permite escolher entre repositórios packages e community
• Interface amigável com whiptail

EXEMPLOS:
$SCRIPT_NAME linux
$SCRIPT_NAME firefox
$SCRIPT_NAME vim
" 20 70
}

# Function to log messages
log_message() {
    echo -e "${BLUE}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Function to display error and exit
error_exit() {
    echo -e "${RED}[ERRO]${NC} $1"
    whiptail --title "Erro" --msgbox "$1" 10 60
    exit 1
}

# Function to check if directory is empty
is_directory_empty() {
    if [ -n "$(ls -A . 2>/dev/null)" ]; then
        return 1 # Not empty
    else
        return 0 # Empty
    fi
}

# Function to choose clone method
choose_clone_method() {
    whiptail --title "Método de Clone" --menu "Escolha o método para baixar o PKGBUILD:" 15 50 2 \
        "pkgctl" "Usar comando pkgctl (recomendado)" \
        "git" "Usar git clone diretamente" 3>&1 1>&2 2>&3
}

# Function to choose repository server for git
choose_git_server() {
    whiptail --title "Repositório Git" --menu "Escolha o repositório GitLab:" 15 60 2 \
        "packages" "https://gitlab.archlinux.org/archlinux/packaging/packages/" \
        "community" "https://gitlab.archlinux.org/archlinux/packaging/community/" 3>&1 1>&2 2>&3
}

# Function to clone with pkgctl
clone_with_pkgctl() {
    log_message "Iniciando clone com pkgctl para: $PACKAGE_NAME"
    
    if whiptail --title "Protocolo" --yesno "Usar protocolo HTTPS?" 10 50; then
        pkgctl repo clone --protocol=https "$PACKAGE_NAME"
    else
        pkgctl repo clone "$PACKAGE_NAME"
    fi
    
    return $?
}

# Function to clone with git
clone_with_git() {
    local SERVER=$(choose_git_server)
    [[ $? -ne 0 ]] && return 1
    
    local REPO_URL=""
    case $SERVER in
        "packages")
            REPO_URL="https://gitlab.archlinux.org/archlinux/packaging/packages/${PACKAGE_NAME}.git"
            ;;
        "community")
            REPO_URL="https://gitlab.archlinux.org/archlinux/packaging/community/${PACKAGE_NAME}.git"
            ;;
        *)
            error_exit "Servidor inválido selecionado"
            ;;
    esac
    
    log_message "Clonando de: $REPO_URL"
    git clone "$REPO_URL"
    return $?
}

# Main function
main() {
    # Show help if no arguments or help flag
    if [[ $# -eq 0 ]] || [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
        show_help
        exit 0
    fi

    log_message "Iniciando script para pacote: $PACKAGE_NAME"

    # Check if current directory is empty
    if ! is_directory_empty; then
        if whiptail --title "Diretório Não Vazio" --yesno "O diretório atual não está vazio. Deseja criar uma pasta com o nome do pacote?" 10 60; then
            mkdir -p "$PACKAGE_NAME"
            cd "$PACKAGE_NAME" || error_exit "Falha ao entrar na pasta: $PACKAGE_NAME"
            log_message "Entrou na pasta: $PACKAGE_NAME"
        else
            if whiptail --title "Confirmação" --yesno "Continuar no diretório atual (não vazio)?" 10 50; then
                log_message "Continuando no diretório atual não vazio"
            else
                log_message "Operação cancelada pelo usuário"
                exit 0
            fi
        fi
    else
        log_message "Diretório atual está vazio, continuando..."
    fi

    # Choose clone method
    local METHOD=$(choose_clone_method)
    [[ $? -ne 0 ]] && exit 0

    local CLONE_SUCCESS=false

    case $METHOD in
        "pkgctl")
            if clone_with_pkgctl; then
                CLONE_SUCCESS=true
            else
                if whiptail --title "Falha no pkgctl" --yesno "pkgctl falhou. Tentar com git clone?" 10 50; then
                    if clone_with_git; then
                        CLONE_SUCCESS=true
                    fi
                fi
            fi
            ;;
        "git")
            if clone_with_git; then
                CLONE_SUCCESS=true
            fi
            ;;
    esac

    # Show result
    if $CLONE_SUCCESS; then
        log_message "Clone realizado com sucesso!"
        whiptail --title "Sucesso" --msgbox "PKGBUILD baixado com sucesso para o pacote: $PACKAGE_NAME" 10 60
        
        # Show PKGBUILD location
        local PKGBUILD_PATH=$(find . -name "PKGBUILD" -type f | head -1)
        if [[ -n "$PKGBUILD_PATH" ]]; then
            whiptail --title "Localização do PKGBUILD" --msgbox "PKGBUILD encontrado em: $PKGBUILD_PATH" 12 70
        fi
    else
        error_exit "Falha ao baixar o PKGBUILD para: $PACKAGE_NAME"
    fi
}

# Check if whiptail is installed
if ! command -v whiptail &> /dev/null; then
    echo -e "${RED}[ERRO]${NC} whiptail não está instalado. Instale com:"
    echo "sudo pacman -S libnewt"
    exit 1
fi

# Check if git is installed
if ! command -v git &> /dev/null; then
    error_exit "git não está instalado. Instale com: sudo pacman -S git"
fi

# Run main function
main "$@"