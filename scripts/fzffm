#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes
trap "" SIGTSTP  # No Ctrl+Z.

: <<'DOCUMENTATION'
Preview pane for files (text, images, PDFs) with adjustable width (20-150 via Ctrl-h/l)
Directory browsing with exa/ls fallback, hidden file toggle, and recursive search
Keybind-driven operations (open/edit files, toggle views, mark selections)
MIME-type handling (text editors, image viewers, media players)
Persistent settings in ~/.cache including preview margins and UI preferences
ANSI colors/icons support with bat/highlight for syntax highlighting
Debug logging and temporary file cleanup system for stability
Uses fzf for fuzzy finding and is based on ranger and lesspipe for file previews
DOCUMENTATION

clear

# Check and change to directory if provided
if test -n "$1" && test -d "$1"; then
    initial_dir=$(realpath "$1")
else
    initial_dir="$PWD"
fi

# Settings
VERSION=1.0
SCRIPT="${0##*/}"
TMPDIR="${TMPDIR:-/tmp}"
TMP_FZF_DIR="${TMPDIR}/${SCRIPT%.*}"
CACHE_FZF_DIR="${XDG_CACHE_HOME:=${HOME}/.cache}/${SCRIPT%.*}"
MARGIN_PREVIEW="${CACHE_FZF_DIR}/margin_preview"
[[ ! -d "$TMP_FZF_DIR" ]] && mkdir -p "$TMP_FZF_DIR"
[[ ! -d "$CACHE_FZF_DIR" ]] && mkdir -p "$CACHE_FZF_DIR"
[[ ! -f "$MARGIN_PREVIEW" ]] && echo 150 | tee "$MARGIN_PREVIEW" >/dev/null
exec 2>"${TMPDIR}/${SCRIPT%.*}-debug.log"
MARKED_FILES_FILE="${TMP_FZF_DIR}/marked_files"
touch "$MARKED_FILES_FILE"

# Main configuration
SCRIPT_PATH="$(realpath "$0")"
preview_cmd="bash \"$SCRIPT_PATH\" --preview-file {}"
read -ra redraw <<< "$preview_cmd"

# Prepare the Archive Array
declare -a marked_files=()
# Loads the files marked in both array and the file
if [[ -f "$MARKED_FILES_FILE" ]]; then
    readarray -t marked_files < "$MARKED_FILES_FILE"
else
    touch "$MARKED_FILES_FILE"
fi

sync_marked_files() {
    printf "%s\n" "${marked_files[@]}" > "$MARKED_FILES_FILE"
}

generate_mark_file() {
    marked_files=()
    sync_marked_files
}

{ [[ -n "$XTERM_VERSION" ]] && message_width=$(($(tput cols) - 1)); } || message_width=$(($(tput cols) / 2))		# 1/2 of the terminal width
{ [[ -n "$XTERM_VERSION" ]] && message_height=$(($(tput lines) - 1)); } || message_height=$(($(tput lines) / 2))	# 1/2 of the terminal height

cleanup() { [[ -d "$TMP_FZF_DIR" ]] && rm -rf "$TMP_FZF_DIR" 2>/dev/null; }

help() {
    cat << EOF
FZF FILE MANAGER HELP - KEY BINDINGS

Navigation:
  ↑/↓ or Tab/Shift-Tab  - Move selection up/down
  Enter                 - Open selected file/directory
  Right                 - Open selected file/directory
  Left                  - Go up one level
  Ctrl-q/Ctrl-c/Esc     - Exit file manager
  F1 or ?               - Show this help menu

View Modes:
  Ctrl-p                - Toggle preview panel
  Ctrl-h                - Increase preview margin (+5)
  Ctrl-l                - Decrease preview margin (-5)
  Ctrl-r/F5             - Refresh current view
  Alt-h                 - Toggle hidden files visibility
  Alt-c                 - Toggle cyclic scrolling

Search Modes:
  Ctrl-f                - Toggle recursive search
  Type text             - Search/filter items

File Operations:
  Alt-a                 - Toggle mark/unmark selected file (multi-select)
  Ctrl-e                - Delete selected or marked files
  Right/Enter           - Open file with appropriate handler

Preview Features:
  - Text files:         Syntax highlighting (bat/highlight/fallback to head)
  - Images:             Thumbnail preview (magick/viu/chafa/fallback to file info)
  - PDFs:              Text extraction (pdftotext/fallback to file info)
  - Directories:        List contents (exa/ls)
  - Other files:        File type information and strings extraction
  - Adjustable margin:  Dynamic resizing (20-150) with Ctrl-h/Ctrl-l

Configuration:
  - Preview margin:     Persisted in $MARGIN_PREVIEW
  - UI Preferences:     Stored in $CACHE_FZF_DIR (recursive, hidden files, cycle)
  - Debug logs:         Written to ${TMPDIR}/${SCRIPT%.*}-debug.log
  - Marked files:       Persisted in $MARKED_FILES_FILE

New Features:
  - Native multi-select using fzf's --multi and toggle functionality
  - Simplified marking system without visual indicators ([<])
  - More efficient file selection handling
  - Version $VERSION
EOF
}

dialog_help() {
    local helpfile="${TMP_FZF_DIR}/help.txt"
    help > "$helpfile"
    whiptail --title "File Manager Help" --scrolltext --textbox "$helpfile" "$message_height" "$message_width"
    rm -f "$helpfile"
}

messages() {
    whiptail --title "$1" --msgbox "$2" "$message_height" "$message_width" >/dev/null 2>&1 >/dev/tty
}

########################## PREVIEW FILE MANAGER
cmd_check() {
    { [[ "${#no_cmd[*]}" -gt 1 ]] && msg=$(echo "${no_cmd[*]}" | awk 'BEGIN {first=1} {for (i=1; i<=NF; i++) \
    {if (first) {printf "%s", $i; first=0} else {printf " or %s", $i}}} END {print ""}'); } || msg="${no_cmd[*]}"
    [[ "$1" == "-msg" ]] && printf '\e7\e[%sH\e[K%s\e8' "$LINES" "(It was not possible to display the file). Install $msg" &&
    no_cmd=() && read -rsn 1 -p "" </dev/tty >/dev/null 2>/dev/null && return 0
    ! command -v "$1" 1>/dev/null && no_cmd+=(\""$2"\") && return 1 || return 0
}

margin() {
    local file="$1"
    { cmd_check fold coreutils &&
    fold -s -w $(($(tput cols) - ${PREVIEW_MARGIN:-5})) "$file" && return 0; } ||
    cmd_check -msg && return 1
}

any_file() {
    file="$1"
    margin <(file "$file" | sed -n 's/.*:\s*\(.*\)/\1/p') && echo &&
    margin <(strings -n 10 "$file") 2>/dev/null | sed '/^[0-9]\{11\}/d' && return 0
}

########################## FZF FILE MANAGER
clean_path() {
    local path="$1"
    echo "$path" | awk '{gsub(/^[[:space:]]+|[[:space:]]+$/, ""); gsub(/^'\''|'\''$/, ""); gsub(/'\''/, ""); gsub(/\\+/, ""); print}'
}

f_header_text() {
	find_status=$([ -f "$CACHE_FZF_DIR/find" ] && echo "on" || echo "off")
	cycle_status=$([ -f "$CACHE_FZF_DIR/cycle" ] && echo "on" || echo "off")
	preview_status=$([ ! -f "$CACHE_FZF_DIR/hidepreview" ] && echo "on" || echo "off")

	# Builds header_text with marked Files
	marked_files_status=""
	if [ ${#marked_files[@]} -gt 0 ]; then
		marked_files_status="Marked files:\n"
		for file in "${marked_files[@]}"; do
			if [[ -n "$file" ]]; then
				basename=$(basename "$file")
				marked_files_status+=" $(echo "$basename" | cut -c1-28) [<]\n"
			fi
		done
		# Removes the section if no valid file has been added
		if [[ "$marked_files_status" == "Marked files:\n" ]]; then
			marked_files_status="No files marked"
		fi
	else
		marked_files_status="No files marked"
	fi

	cat <<-EOF | echo -e "$(cat)"
	╭─ STATUS ────────────────────────╮
	 ? for help |
	 Preview:$preview_status | Cycle:$cycle_status | 🔍:$find_status
	 $marked_files_status
	╰─────────────────────────────────╯
	EOF
}

mark() {
    local file="$1"
    # Get the absolute path of the file
    local real_path
    real_path=$(realpath "$file" 2>/dev/null) || return 1

    # Check if file is already marked
    local found=0
    for i in "${!marked_files[@]}"; do
        if [[ "${marked_files[i]}" == "$real_path" ]]; then
            # Remove from array
            unset 'marked_files[i]'
            found=1
            break
        fi
    done

    if [[ $found -eq 0 ]]; then
        # Add to array
        marked_files+=("$real_path")
    fi

    # Sync with file
    sync_marked_files
}

mark_all_only() {
    # Cleans the current array
    marked_files=()
    
    # Get all visible files/directories (except. E ..)
    local all_files=()
    if [[ -f "$CACHE_FZF_DIR/showhidden" ]]; then
        # Includes hidden files
        while IFS= read -r -d $'\0' file; do
            [[ -e "$file" ]] && all_files+=("$(realpath "$file")")
        done < <(find . -mindepth 1 -maxdepth 1 -print0 2>/dev/null)
    else
        # Delete Hidden Files
        while IFS= read -r -d $'\0' file; do
            [[ -e "$file" ]] && all_files+=("$(realpath "$file")")
        done < <(find . -mindepth 1 -maxdepth 1 -not -name '.*' -print0 2>/dev/null)
    fi
    
    # Add only valid files/directories to the marked_files array
    for file in "${all_files[@]}"; do
        if [[ -e "$file" ]]; then
            marked_files+=("$file")
        fi
    done
    
    # Synchronizes with the file
    sync_marked_files
}

mark_all_toggle() {
    # Get all visible files in current directory
    local all_files=()
    if [[ -f "$CACHE_FZF_DIR/showhidden" ]]; then
        while IFS= read -r -d $'\0' file; do
            [[ -e "$file" ]] && all_files+=("$(realpath "$file")")
        done < <(find . -mindepth 1 -maxdepth 1 -print0 2>/dev/null)
    else
        while IFS= read -r -d $'\0' file; do
            [[ -e "$file" ]] && all_files+=("$(realpath "$file")")
        done < <(find . -mindepth 1 -maxdepth 1 -not -name '.*' -print0 2>/dev/null)
    fi

    # Invert the selection
    local new_marked_files=()
    for file in "${all_files[@]}"; do
        local found=0
        for marked in "${marked_files[@]}"; do
            if [[ "$marked" == "$file" ]]; then
                found=1
                break
            fi
        done
        [[ $found -eq 0 ]] && new_marked_files+=("$file")
    done

    marked_files=("${new_marked_files[@]}")
    sync_marked_files
}

print_pwd() {
    basedir="$1"
    previous_directory=$(printf '%b\n' "\033[${PWD_PREVIOUS_DIRECTORY:-1;38;5;16}m") # Black ansi 256 
    last_dir=$(printf '%b\n' "\033[${PWD_LAST_DIR:-1;33}m")                          # Yellow
    bar=$(printf '%b\n' "\033[${PWD_BAR:-1;96}m")                                    # Cyan
    ncpf=$(printf '\033[0m')

    printf '%b\n' "$basedir" | awk -v pd="$previous_directory" -v bar="$bar" -v ld="$last_dir" -v reset="$ncpf" '
    {
        if ($0 == "/") {
            print bar "/" reset;
            exit;
        }
        
        len = split($0, parts, "/");
        output = "";
        
        if ($0 ~ /^\//) {
            output = bar "/" pd;
            start_idx = 2;
        } 
        else {
            start_idx = 1;
        }
        
        for (i = start_idx; i <= len; i++) {
            if (parts[i] != "") {
                if (i == len) {
                    output = output ld parts[i] reset;
                } else {
                    output = output parts[i] bar "/" pd;
                }
            }
        }
        
        print output;
    }'
}

print_filemanager_header() {
    header_top="  $(print_pwd "${1:-$PWD}")"
    echo -e "\033[${ICO_FOLDER:-1;96}m$header_top"
    { [[ "$PWD" == "/" ]] && echo -e "\033[${ICO_FOLDER:-1;96}m${HOME}"; } || echo -e "\033[${ICO_FOLDER:-1;96}m .."
}

safe_find_dirs_limited() {
    if command -v fd >/dev/null; then
        fd \
            --max-results 1000 --type d --absolute-path --max-depth 8 \
            --hidden --exclude "__pycache__" --exclude "*.default*" \
            --exclude ".git" --exclude ".subversion" --exclude ".mednafen" --exclude "*OpenWith*" 2>/dev/null
    else
        find . -maxdepth 2 -type d ! -path '*/\.*' ! -path '*__pycache__*' ! -path '*.subversion*' \
            ! -path '*OpenWith*' ! -path '*mednafen*' 2>/dev/null | sed 's|^\./||'
    fi
}

safe_find_dirs() {
    if command -v fd >/dev/null; then
        fd \
            --hidden --exclude "__pycache__" --exclude "*.default*" \
            --exclude ".git" --exclude ".subversion" --exclude ".mednafen" --exclude "*OpenWith*" 2>/dev/null
    else
        find . ! -path '*/\.*' ! -path '*__pycache__*' ! -path '*.subversion*' \
            ! -path '*OpenWith*' ! -path '*mednafen*' 2>/dev/null | sed 's|^\./||'
    fi
}

safe_ls() {
    if [[ -f "$CACHE_FZF_DIR/find" ]]; then
        print_filemanager_header "$1"
        safe_find_dirs
    else
        print_filemanager_header "$1"
        list_opts="--group-directories-first --color=always"
        { [ -f "$CACHE_FZF_DIR/showhidden" ] && showhidden='-a'; } || showhidden=''

        if command -v ls >/dev/null; then
            ls $showhidden $list_opts "${1:-$PWD}" 2>/dev/null | sed "s/\*$//g; s|/$||"
        else
            find "${1:-$PWD}" -maxdepth 1 -not -path '*/\.*' 2>/dev/null | sed "s|${1:-$PWD}/||"
        fi
    fi
}

delete_file() {
	local path="$1"
	file="$(clean_path "$path")"

	delete_marked() {
		[[ ${#marked_files[@]} -le 0 ]] && messages "Warn" "warn: no files were marked" && return
		# Lists the files marked for confirmation
		local file_list=""
		for file in "${marked_files[@]}"; do
			local basename="${file##*/}"
			file_list+="\n'$basename'"
		done

		cmd_reply=$({ whiptail --yesno --scrolltext "Delete the following files? (y/N):\n\n$file_list" "$message_height" "$message_width" --yes-button "Yes" --no-button "No" >/dev/null 2>&1 >/dev/tty && echo "y"; } || echo "n")
		if [[ "$cmd_reply" =~ ^[Yy]$ ]]; then
			# Check permissions and delete
			local failed=false
			for file in "${marked_files[@]}"; do
				if [[ -w "$file" ]]; then
					if ! rm -rf "$file" 2>/dev/null; then
						failed=true
					fi
				else
					failed=true
					messages "Warn" "warn: no write access to '$file'."
				fi
			done

			if [[ "$failed" == false ]]; then
				generate_mark_file
				"${redraw[@]}"
				messages "Success" "Files deleted successfully!"
			else
				generate_mark_file
				[[ -f "$MARKED_FILES_FILE" ]] && rm -f "$MARKED_FILES_FILE" && touch "$MARKED_FILES_FILE"
				"${redraw[@]}"
				messages "Warn" "warn: some deletions failed."
			fi
		else
			generate_mark_file
			messages "Warn" "Deletion canceled."
		fi
	}

	if [[ "${file}" =~ ^"" ]]; then
		delete_marked
		return
    elif [[ ! -e "${file}" ]]; then
        return
    elif [[ ${#marked_files[@]} -le 0 ]]; then
        # Delete a single selected file
        local filename="${file##*/}"
        cmd_reply=$({ whiptail --yesno "Delete '${filename}'?" "$message_height" "$message_width" --yes-button "Yes" --no-button "No" >/dev/null 2>&1 >/dev/tty && echo "y"; } || echo "n")

        if [[ "$cmd_reply" =~ ^[Yy]$ ]]; then
            if [[ -w "${file}" ]]; then
                if rm -rf "${file}" 2>/dev/null; then
                    "${redraw[@]}"
					messages "Success" "File: \"$filename\" deleted successfully!"
                else
					messages "Warn" "warn: deletion failed."
                fi
            else
				messages "Warn" "warn: no write access to file/directory."
            fi
        else
			messages "Canceled" "Deletion canceled."
        fi
    # Delete marked files
    else
        # Checks writing permission in the current directory
        if [[ ! -w "$PWD" ]]; then
			messages "Warn" "No write permission in the current directory ($PWD)."
        else
			delete_marked
        fi
    fi
}

copy_file() {
    local path="$1"
	file="$(clean_path "$path")"
	file="${file% "[<]"}"

    copy_marked() {
        [[ ${#marked_files[@]} -le 0 ]] &&
        messages "Warn" "warn: no files were marked" && return
        # Check if any files already exist at destination
        local existing_files=""
        for file in "${marked_files[@]}"; do
            local basename="${file##*/}"
            if [[ -e "$PWD/$basename" ]]; then
                existing_files+="\n'$basename'"
            fi
        done

        if [[ -n "$existing_files" ]]; then
            cmd_reply=$({ whiptail --yesno --scrolltext "Already exist in $PWD. Overwrite? (y/N):\n\nSome files:\n\n($existing_files)" "$message_height" "$message_width" --yes-button "Yes" --no-button "No" >/dev/null 2>&1 >/dev/tty && echo "y"; } || echo "n")
            if [[ "$cmd_reply" =~ ^[Yy]$ ]]; then
                # Copy with Sobrescript
                if cp -rf "${marked_files[@]}" "$PWD" >&2; then
                    generate_mark_file
                    "${redraw[@]}"
                    messages "Success" "Copy completed successfully!"
                else
                    generate_mark_file
                    "${redraw[@]}"
                    messages "Warn" "warn: Failed to copy files."
                fi
            else
                messages "Canceled" "Copy operation canceled."
            fi
        else
            # Copy Without Sobrescript Necessary
            if cp -rf "${marked_files[@]}" "$PWD" >&2; then
                generate_mark_file
                "${redraw[@]}"
                messages "Success" "Copy completed successfully!"
            else
                generate_mark_file
                "${redraw[@]}"
                messages "Warn" "warn: Failed to copy files."
            fi
        fi
    }
    
    [[ "${file}" =~ ^"" ]] && 
        copy_marked && return
    [[ ! -w "$PWD" ]] && 
        messages "Warn" "No write permission in the current directory ($PWD)." && 
        return
	[[ ! -e "${file}" ]] && [[ ${#marked_files[@]} -le 0 ]] &&
        messages "Warn" "No file or directory has been selected!" &&
        return
    if [[ ${#marked_files[@]} -le 0 ]]; then
        # Generate suggested name with _copy suffix
        local filename="${file##*/}"
        local basename="${filename%.*}"
        local extension="${filename##*.}"
        
        # Handle files without extension
        if [[ "$basename" == "$extension" ]]; then
            suggested_name="${basename}_copy"
        else
            suggested_name="${basename}_copy.${extension}"
        fi
        
        cmd_reply=$(whiptail --title "New name" --inputbox "copy ${filename} to: " 10 60 "$suggested_name" 3>&1 1>&2 2>&3 >/dev/tty)

        [[ "$cmd_reply" ]] &&
            if [[ -e "${PWD}/${cmd_reply}" ]]; then
                cmd_reply=$({ whiptail --yesno "warn: '${cmd_reply}' already exists. Overwrite? (y/N): " "$message_height" "$message_width" --yes-button "Yes" --no-button "No" >/dev/null 2>&1 >/dev/tty && echo "y"; } || echo "n")
                if [[ "$cmd_reply" =~ ^[Yy]$ ]]; then
                    if cp -rf "${file}" "${PWD}/${cmd_reply}" 2>/dev/null; then
                        "${redraw[@]}"
                        messages "Success" "Copy completed successfully!"
                    else
                        messages "Warn" "warn: Failed to copy the file."
                    fi
                fi
            elif [[ -r "${file}" ]]; then
                if cp -rf "${file}" "${PWD}/${cmd_reply}" 2>/dev/null; then
                    "${redraw[@]}"
                    messages "Success" "Copy completed successfully!"
                else
                    messages "Warn" "warn: Failed to copy the file."
                fi
            else
                messages "Warn" "warn: Cannot read the file/directory."
            fi
    # Copy files marked to the current directory
    else
        # Checks writing permission in the current directory
        if [[ ! -w "$PWD" ]]; then
            return
        else
            copy_marked
        fi
    fi
}

handle_selected_files() {
    local path="$1"
    file=$(clean_path "$path")
    
    case "$(file --mime-type -bL "$file")" in
        */json|*/csv|*/xml|*script*|text/*) 
            "$EDITOR" "$file" ;;
        image/*) 
            feh -Z -x -F -B black "$file" ;;
        audio/*) 
            ffplay -i "$file" -hide_banner -nodisp -autoexit ;;
        video/*) 
            mpv -fs "$file" ;;
        *)
            xdg-open "$file" &>/dev/null &  # Fallback to open with standard app
            ;;
    esac
}

directory_view() {
    local file="$1"
    { [ -f "$CACHE_FZF_DIR/longfilemanager" ] && longfilemanager='-l'; } || longfilemanager=''
    if command -v exa >/dev/null; then
        exa -1 "$longfilemanager" --icons --classify \
        --group-directories-first --colour=always \
        "$file" 2>/dev/null | sed 's|/$||'
    else
        ls -1 "$longfilemanager" --classify \
        --group-directories-first --color=always \
        -F "$file" 2>/dev/null | sed 's|/$||'
    fi
}

preview_file() {
    local path="$1"
    file=$(clean_path "$path")

    if [[ "$file" == " .." ]]; then
        directory_view ".."
        return
    elif [[ "$file" =~ " " ]]; then
        echo -e "\033[${CURRENT_DIR:-1;33}mCurrent Directory:\033[0m ["$(print_pwd "$PWD")"]"
        return
    elif [ ! -e "$file" ]; then
        echo "File not found: $file"
        return 1
    fi
    
    mime_type=$(file --mime-type -b "$file" 2>/dev/null || echo "application/octet-stream")
    sixel_size="${PREVIEW_SIXEL_W:-800}x${PREVIEW_SIXEL_H:-600}!"
    
    case "$mime_type" in
        text/*|*/json|*/csv|*/xml|*script*)
            if command -v bat >/dev/null; then
                bat --color=always --style=plain --paging=never "$file" 2>/dev/null
            elif command -v highlight >/dev/null; then
                highlight -O ansi --force "$file" 2>/dev/null
            else
                head -n 100 "$file" 2>/dev/null
            fi
            ;;
        image/*)
            if command -v magick >/dev/null; then
                magick -quiet -- "${file}" -auto-orient -resize "${sixel_size}" sixel:-
            elif command -v viu >/dev/null; then
                viu -t "$file" 2>/dev/null
            elif command -v chafa >/dev/null; then
                chafa --format=symbols -s 80x40 "$file" 2>/dev/null
            else
                echo "Image: $file"
                file -b "$file"
            fi
            ;;
        application/pdf)
            if command -v pdftotext >/dev/null; then
                pdftotext -l 10 -nopgbrk -q "$file" - 2>/dev/null
            else
                echo "PDF: $file"
                file -b "$file"
            fi
            ;;
        *)
            if [ -d "$file" ]; then
                directory_view "$file"
            else
                file -b "$file" 2>/dev/null
                any_file "$file"
            fi
            ;;
    esac
}

fzf_pid() {
    { fzf "$@" || echo $? > "$TMP_FZF_DIR/signal"; } &
    fzf_pid=$!
    wait "$fzf_pid" 
    return 0
}

fzf_binds() {
    local path="$1"
    prompt_text="Search 🔍: "
    path=$(clean_path "$path")
    header_text=$(f_header_text)
    margin_preview=$(cat "$MARGIN_PREVIEW")
    query=$(cat "$TMP_FZF_DIR/query" || echo "")
    { [ -f "$CACHE_FZF_DIR/cycle" ] && cycle="--cycle"; } || cycle="--ansi"
    { [ -f "$CACHE_FZF_DIR/hidepreview" ] && hidepreview=":hidden"; } || hidepreview=''
    { [ ! -f "$CACHE_FZF_DIR/header" ] && header="--header=$header_text"; } || header="--ansi"
    
    # Build fzf's arguments in an array
    local fzf_args=(
        "$cycle"
        --ansi
        --multi
        --no-bold
        "$header"
        --query="$query"
        --bind shift-tab:up
        --bind 'enter:accept'
        --bind "right:accept"
        --prompt="$prompt_text"
        --bind 'ctrl-space:jump'
        --preview="$preview_cmd"
        --bind 'left:top+up+accept'
        --bind "ctrl-r,f5:top+accept"
        --bind "f1,?:execute(bash \"$SCRIPT_PATH\" --show-help {})"
        --preview-window="right:$margin_preview:noborder$hidepreview"
        --bind "ctrl-q:execute(echo 130 > \"$TMP_FZF_DIR/signal\")+abort"
        --bind "ctrl-y:execute(bash \"$SCRIPT_PATH\" --copy-file {})+top+accept"
        --bind "ctrl-e:execute(bash \"$SCRIPT_PATH\" --delete-file {})+top+accept"
        --bind "ctrl-f:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/find\" ] && touch \"$CACHE_FZF_DIR/find\"; } || rm -f \"$CACHE_FZF_DIR/find\")+top+accept"
        --bind "alt-a:toggle+execute-silent(bash \"$SCRIPT_PATH\" --mark-file {})+execute(bash \"$SCRIPT_PATH\" --update-header > \"$TMP_FZF_DIR/header\")"
        --bind "alt-c:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/cycle\" ] && touch \"$CACHE_FZF_DIR/cycle\"; } || rm -f \"$CACHE_FZF_DIR/cycle\")+top+accept"
        --bind "alt-z:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/header\" ] && touch \"$CACHE_FZF_DIR/header\"; } || rm -f \"$CACHE_FZF_DIR/header\")+top+accept"
		--bind "ctrl-a:toggle-all+execute-silent(bash \"$SCRIPT_PATH\" --mark-all-toggle)+execute(bash \"$SCRIPT_PATH\" --update-header > \"$TMP_FZF_DIR/header\")"
		--bind "alt-x:select-all+execute-silent(bash \"$SCRIPT_PATH\" --mark-all-only)+execute(bash \"$SCRIPT_PATH\" --update-header > \"$TMP_FZF_DIR/header\")"
        --bind "alt-h:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/showhidden\" ] && touch \"$CACHE_FZF_DIR/showhidden\"; } || rm -f \"$CACHE_FZF_DIR/showhidden\")+top+accept"
        --bind "alt-l:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/longfilemanager\" ] && touch \"$CACHE_FZF_DIR/longfilemanager\"; } || rm -f \"$CACHE_FZF_DIR/longfilemanager\")+top+accept"
        --bind "ctrl-p:toggle-preview+execute-silent({ [ ! -f \"$CACHE_FZF_DIR/hidepreview\" ] && touch \"$CACHE_FZF_DIR/hidepreview\"; } || rm -f \"$CACHE_FZF_DIR/hidepreview\")+top+accept"
        --bind "ctrl-l:execute-silent(current=\$(cat \"$MARGIN_PREVIEW\"); if [ \$current -gt 20 ]; then new=\$((current - 5)); echo \$new > \"$MARGIN_PREVIEW\"; fi)+reload(bash \"$SCRIPT_PATH\" --list-files {})+top+accept"
        --bind "ctrl-h:execute-silent(current=\$(cat \"$MARGIN_PREVIEW\"); if [ \$current -lt 150 ]; then new=\$((current + 5)); echo \$new > \"$MARGIN_PREVIEW\"; fi)+reload(bash \"$SCRIPT_PATH\" --list-files {})+top+accept"
    )

    select="$(safe_ls "$path" | \
    fzf_pid "${fzf_args[@]}" \
        --expect=enter,right 2>&1)"

    selected=$(clean_path "$select")

    if [ -f "$TMP_FZF_DIR/signal" ]; then
        fzf_error=$(cat "$TMP_FZF_DIR/signal")
        rm -f "$TMP_FZF_DIR/signal"
        [ "$fzf_error" -eq 130 ] && return 1
    fi

    return 0
}

main() {
    # Starts in the initial directory
    builtin cd "$initial_dir" || exit 1
    
    while true; do 
        # Loads marked_files from the file
        readarray -t marked_files < <(cat "$MARKED_FILES_FILE" 2>/dev/null || true)
                
        # Selection logic with new binds
        fzf_binds "$PWD" || { cleanup && exit 130; }
        
        # Determines the action based on the pressed key
        key="$(head -1 <<< "$selected")"
        selected="$(tail -n +2 <<< "$selected")"
        selected=$(clean_path "$selected")
        
        # Selection processing
        if [ -d "$selected" ]; then
            builtin cd "$selected" || continue
        elif [[ "$selected" == " .." ]]; then
            builtin cd .. || true
        else
            file_path=$(realpath "$PWD/$selected" 2>/dev/null || echo "$PWD/$selected")
            # If it was pressed right or enter
            if [[ "$key" == "right" || "$key" == "enter" ]]; then
                handle_selected_files "$file_path"
            fi
        fi
    done
}

case "$1" in
    --version)
        echo "$SCRIPT $VERSION"
        ;;
    --help)
        help
        ;;
    --show-help)
        dialog_help
        ;;
    --update-header)
        f_header_text
        ;;
	--mark-all-only)
    	mark_all_only
		;;
	--mark-all-toggle)
    	mark_all_toggle
    	;;
    --preview-file)
        shift
        preview_file "$1"
        ;;
    --list-files)
        shift
        safe_ls "$PWD"
        ;;
    --delete-file)
        shift
        delete_file "$1"
        ;;
    --copy-file)
        shift
        copy_file "$1"
        ;;
    --mark-file)
        shift
        mark "$1"
        ;;
    *)
        main "$@"
        ;;
esac