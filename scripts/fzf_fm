#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
Preview pane for files (text, images, PDFs) with adjustable width (40-150 via Ctrl-h/l)
Directory browsing with exa/ls fallback, hidden file toggle, and recursive search
Keybind-driven operations (open/edit files, toggle views, mark selections)
MIME-type handling (text editors, image viewers, media players)
Persistent settings in ~/.cache including preview margins and UI preferences
ANSI colors/icons support with bat/highlight for syntax highlighting
Debug logging and temporary file cleanup system for stability
DOCUMENTATION

clear

# Check and change to directory if provided
if test -n "$1" && test -d "$1"; then
    initial_dir=$(realpath "$1")
else
    initial_dir="$PWD"
fi

# Settings
VERSION=1.0
SCRIPT="${0##*/}"
TMPDIR="${TMPDIR:-/tmp}"
TMP_FZF_DIR="${TMPDIR}/${SCRIPT%.*}"
CACHE_FZF_DIR="${XDG_CACHE_HOME:=${HOME}/.cache}/${SCRIPT%.*}"
MARGIN_PREVIEW="${CACHE_FZF_DIR}/margin_preview"
[[ ! -d "$CACHE_FZF_DIR" ]] && mkdir -p "$CACHE_FZF_DIR"
[[ ! -d "$TMP_FZF_DIR" ]] && mkdir -p "$TMP_FZF_DIR"
[[ ! -f "$MARGIN_PREVIEW" ]] && echo 150 | tee "$MARGIN_PREVIEW" >/dev/null
exec 2>"${TMPDIR}/${SCRIPT%.*}-debug.log"

# Function for cleaning paths returned by the FZF
clean_path() {
    local path="$1"
    echo "$path" | awk '{gsub(/^[[:space:]]+|[[:space:]]+$/, ""); gsub(/^'\''|'\''$/, ""); gsub(/'\''/, ""); gsub(/\\+/, ""); print}'
}

help() {
    cat << EOF
FZF FILE MANAGER HELP - KEY BINDINGS

Navigation:
  ↑/↓ or Tab/Shift-Tab  - Move selection up/down
  Enter                 - Open selected file/directory
  Right                 - Open selected file/directory
  Left                  - Go up one level
  Ctrl-q                - Exit file manager
  F1 or ?               - Show this help menu

View Modes:
  Ctrl-p                - Toggle preview panel
  Ctrl-h                - Increase preview margin (+5)
  Ctrl-l                - Decrease preview margin (-5)
  F5                    - Refresh current view
  Alt-h                 - Toggle hidden files visibility
  Alt-c                 - Toggle cyclic scrolling

Search Modes:
  Ctrl-r / Ctrl-s       - Toggle recursive search
  Type text             - Search/filter items

File Operations:
  Ctrl-d                - Mark selected file (logs to temporary file)
  Right/Enter           - Open file with appropriate handler

Preview Features:
  - Text files:         Syntax highlighting (bat/highlight/fallback to head)
  - Images:             Thumbnail preview (viu/chafa/fallback to file info)
  - PDFs:               Text extraction (pdftotext/fallback to file info)
  - Directories:        List contents (exa/ls)
  - Other files:        File type information
  - Adjustable margin:  Dynamic resizing (40-150) with Ctrl-h/Ctrl-l

Configuration:
  - Preview margin:     Persisted in $MARGIN_PREVIEW
  - UI Preferences:     Stored in $CACHE_FZF_DIR
  - Debug logs:         Written to ${TMPDIR}/${SCRIPT%.*}-debug.log

New Features:
  - Help system:        Accessible via F1/? key
  - Whiptail dialog:    Alternative help display
  - Improved preview:   Better media file handling
  - Key bindings:       More intuitive shortcuts
  - Stability fixes:    Better error handling

Note: 
- All temporary files are stored in $TMP_FZF_DIR
- Press any key to close this help
- Version $VERSION
EOF
}

dialog_help() {
    # Create a temporary file with Help content
    local helpfile="${TMP_FZF_DIR}/help.txt"
    help > "$helpfile"
    
    # Show using Whiptail with Scroll
    whiptail --title "File Manager Help" --scrolltext --textbox "$helpfile" 40 80
    
    # Remove temporary file
    rm -f "$helpfile"
}

print_filemanager_header() {
    header_top="  ${1:-$PWD}"
    echo "$header_top"
    { [ "$PWD" = "/" ] && echo "/"; } || echo " .."
}

# Safe Function to find Directories
safe_find_dirs_limited() {
    if command -v fd >/dev/null; then
        fd \
            --max-results 1000 --type d --absolute-path --max-depth 8 \
            --hidden --exclude "__pycache__" --exclude "*.default*" \
            --exclude ".git" --exclude ".subversion" --exclude ".mednafen" --exclude "*OpenWith*" 2>/dev/null
    else
        find . -maxdepth 2 -type d ! -path '*/\.*' ! -path '*__pycache__*' ! -path '*.subversion*' \
            ! -path '*OpenWith*' ! -path '*mednafen*' 2>/dev/null | sed 's|^\./||'
    fi
}

safe_find_dirs() {
	if command -v fd >/dev/null; then
        fd \
            --hidden --exclude "__pycache__" --exclude "*.default*" \
            --exclude ".git" --exclude ".subversion" --exclude ".mednafen" --exclude "*OpenWith*" 2>/dev/null
    else
        find . ! -path '*/\.*' ! -path '*__pycache__*' ! -path '*.subversion*' \
            ! -path '*OpenWith*' ! -path '*mednafen*' 2>/dev/null | sed 's|^\./||'
    fi
}

# Safe Function to List Directories
safe_ls() {
	if [[ -f "$CACHE_FZF_DIR/recursive" ]]; then
		print_filemanager_header "$1"
		safe_find_dirs
	else
		# First show the header
		print_filemanager_header "$1"
		
		# Then list the contents
		if [ "$list_cmd" = "exa" ]; then
			"$list_cmd" \
				$showhidden \
				$longfilemanager \
				$list_opts \
				--icons \
				--classify \
				--git \
				--git-ignore \
				--ignore-glob 'buffers' \
				--group-directories-first \
				--colour=always \
				-1 --level 1 "${1:-$PWD}" 2>/dev/null | sed "s/\*$//g"
		else
			"$list_cmd" \
				$showhidden \
				$list_opts \
				"${1:-$PWD}" 2>/dev/null
		fi
	fi
}

# Main configuration
SCRIPT_PATH="$(realpath "$0")"
preview_cmd="bash \"$SCRIPT_PATH\" --preview-file {}"

# Command Verification
list_cmd=""
if command -v exa >/dev/null; then
    list_cmd="exa"
    list_opts="-1 --icons --classify --git --git-ignore --group-directories-first --colour=always"
elif command -v ls >/dev/null; then
    list_cmd="ls"
    list_opts="-1 --group-directories-first --classify --color=always"
else
    echo "Error: Neither exa nor ls found in PATH" >&2
    exit 1
fi

# Function for dealing with selected files
handle_selected_files() {
    local path="$1"
	file=$(clean_path "$path")
	
    case "$(file --mime-type -bL "$file")" in
        */json|*/csv|*/xml|*script*|text/*) 
            "$EDITOR" "$file" ;;
        image/*) 
            feh -Z -x -F -B black "$file" ;;
        audio/*) 
            ffplay -i "$file" -hide_banner -nodisp -autoexit ;;
        video/*) 
            mpv -fs "$file" ;;
        *)
            xdg-open "$file" &>/dev/null &  # Fallback to open with standard app
            ;;
    esac
}

preview_file() {
    local path="$1"
    file=$(clean_path "$path")

    # Check if the file exists
    if [ ! -e "$file" ]; then
        echo "File not found: $file"
        return 1
    fi
    
    # Get the Mime Type
    mime_type=$(file --mime-type -b "$file" 2>/dev/null || echo "application/octet-stream")
    
    case "$mime_type" in
        text/*|*/json|*/csv|*/xml|*script*)
            if command -v bat >/dev/null; then
                bat --color=always --style=plain --paging=never "$file" 2>/dev/null
            elif command -v highlight >/dev/null; then
                highlight -O ansi --force "$file" 2>/dev/null
            else
                head -n 100 "$file" 2>/dev/null
            fi
            ;;
        image/*)
            if command -v viu >/dev/null; then
                viu -t "$file" 2>/dev/null
            elif command -v chafa >/dev/null; then
                chafa --format=symbols -s 80x40 "$file" 2>/dev/null
            else
                echo "Image: $file"
                file -b "$file"
            fi
            ;;
        application/pdf)
            if command -v pdftotext >/dev/null; then
                pdftotext -l 10 -nopgbrk -q "$file" - 2>/dev/null
            else
                echo "PDF: $file"
                file -b "$file"
            fi
            ;;
        *)
            if [ -d "$file" ]; then
                if command -v exa >/dev/null; then
                    exa -1 --icons --classify --group-directories-first --colour=always "$file" 2>/dev/null
                else
                    ls -1 --classify --group-directories-first --color=always -F "$file" 2>/dev/null
                fi
            else
                file -b "$file" 2>/dev/null
            fi
            ;;
    esac
}

fzf_pid() {
    { fzf "$@" || echo $? > "$TMP_FZF_DIR/signal"; } &
    fzf_pid=$!
	#disown
    wait "$fzf_pid" 
    return 0
}

# Initialization
cleanup() { rm -rf "$TMP_FZF_DIR" 2>/dev/null; }

fzf_binds() {
	local path="$1"
	path=$(clean_path "$path")
	margin_preview=$(cat "$MARGIN_PREVIEW")
	select="$(safe_ls "$path" | \
	fzf_pid \
		"$cycle" \
		--ansi \
		--multi \
		--no-bold \
      	--bind shift-tab:up \
		--bind 'enter:accept' \
		--header="$header_text" \
		--prompt="$prompt_text" \
		--preview="$preview_cmd" \
		--preview-window="right:$margin_preview:noborder$hidepreview" \
		--bind "ctrl-q:execute(echo 130 > \"$TMP_FZF_DIR/signal\")+abort" \
		--bind "f5:execute(bash \"$SCRIPT_PATH\" --list-files {})+top+accept" \
		--bind "f1,?:execute(bash \"$SCRIPT_PATH\" --show-help {})" \
		--bind "right:execute-silent(rm \"$TMP_FZF_DIR/querytext\";)+accept" \
		--bind 'left:top+up+accept' \
		--bind "ctrl-d:execute(echo \"Selected: {}\" > \"$TMP_FZF_DIR/selected.log\")+accept" \
		--bind "ctrl-h:execute-silent(current=\$(cat \"$MARGIN_PREVIEW\"); if [ \$current -lt 150 ]; then new=\$((current + 5)); echo \$new > \"$MARGIN_PREVIEW\"; fi)+reload(bash \"$SCRIPT_PATH\" --list-files {})+top+accept" \
		--bind "ctrl-l:execute-silent(current=\$(cat \"$MARGIN_PREVIEW\"); if [ \$current -gt 40 ]; then new=\$((current - 5)); echo \$new > \"$MARGIN_PREVIEW\"; fi)+reload(bash \"$SCRIPT_PATH\" --list-files {})+top+accept" \
		--bind "ctrl-p:toggle-preview+execute-silent({ [ ! -f \"$CACHE_FZF_DIR/hidepreview\" ] && touch \"$CACHE_FZF_DIR/hidepreview\"; } || rm -f \"$CACHE_FZF_DIR/hidepreview\")+top+accept" \
		--bind "ctrl-r,ctrl-s:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/recursive\" ] && touch \"$CACHE_FZF_DIR/recursive\"; } || rm -f \"$CACHE_FZF_DIR/recursive\")+top+accept" \
		--bind "alt-h:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/showhidden\" ] && touch \"$CACHE_FZF_DIR/showhidden\"; } || rm -f \"$CACHE_FZF_DIR/showhidden\")+top+accept" \
		--bind "alt-c:execute-silent({ [ ! -f \"$CACHE_FZF_DIR/cycle\" ] && touch \"$CACHE_FZF_DIR/cycle\"; } || rm -f \"$CACHE_FZF_DIR/cycle\")+top+accept" \
		--expect=enter,right 2>&1)"

	selected=$(clean_path "$select")

	if [ -f "$TMP_FZF_DIR/signal" ]; then
		fzf_error=$(cat "$TMP_FZF_DIR/signal")
        rm -f "$TMP_FZF_DIR/signal"  # Clean to avoid false positives
        [ "$fzf_error" -eq 130 ] && return 1  # Retorna erro apenas se for Ctrl+C
    fi

    return 0
}

main() {
    # Starts in the initial directory (passed as an argument or current)
    builtin cd "$initial_dir" || exit 1
    
    while true; do
        # Initial Settings
        prompt_text="Search 🔍: "
        cycle_status=$([ -f "$CACHE_FZF_DIR/cycle" ] && echo "on" || echo "off")
        recursive_status=$([ -f "$CACHE_FZF_DIR/recursive" ] && echo "on" || echo "off")
        preview_status=$([ ! -f "$CACHE_FZF_DIR/hidepreview" ] && echo "on" || echo "off")
        header_text=$(echo -e "╭─ STATUS ────────────────────────╮\n  ? for help |\n  Preview:$preview_status | Cycle:$cycle_status | 🔍:$recursive_status\n╰─────────────────────────────────╯")
        
        { [ -f "$CACHE_FZF_DIR/cycle" ] && cycle="--cycle"; } || cycle="--ansi"
        { [ -f "$CACHE_FZF_DIR/showhidden" ] && showhidden='-a'; } || showhidden=''
        { [ -f "$CACHE_FZF_DIR/hidepreview" ] && hidepreview=":hidden"; } || hidepreview=''
        { [ -f "$CACHE_FZF_DIR/longfilemanager" ] && longfilemanager='--long'; } || longfilemanager=''
                
        # Selection logic with new binds
        fzf_binds "$PWD" || { cleanup && exit 130; }
        
        # Determines the action based on the pressed key
        key="$(head -1 <<< "$selected")"
        selected="$(tail -n +2 <<< "$selected")"
        selected=$(clean_path "$selected")
        
        # Selection processing
        if [ -d "$selected" ]; then
            builtin cd "$selected" || continue
        elif [ "$selected" = " .." ]; then
            builtin cd .. || true
        else
            file_path=$(realpath "$PWD/$selected" 2>/dev/null || echo "$PWD/$selected")
            # If it was pressed right or enter the file
            if [[ "$key" == "right" || "$key" == "enter" ]]; then
                # If it is a text file, open in the editor
                handle_selected_files "$file_path"
            fi
        fi
    done
}

case "$1" in
    --version)
        echo "$SCRIPT $VERSION"
        ;;
    --preview-file)
        shift
        preview_file "$1"
        ;;
    --list-files)
        safe_ls "$PWD"
        ;;
    --help)
		help
		;;
    --show-help)
        dialog_help
        ;;
    *)
        main "$@"
        ;;
esac