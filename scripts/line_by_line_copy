#!/bin/bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
Input-Output File Processing Utility

This Bash script is a robust file processing utility designed to copy and validate file contents with 
precise error handling and verification mechanisms. It provides a systematic approach to file manipulation 
with comprehensive input validation and integrity checks.

Key Strengths:
1. Strict argument validation ensuring correct script usage
2. Comprehensive error handling for invalid inputs
3. Line-by-line file copying with simultaneous terminal display
4. MD5 checksum verification for file integrity
5. Secure file operation with pre-existing file protection

Capabilities:
- Accepts input and output file parameters via command-line arguments
- Prevents overwriting existing output files
- Copies file contents line by line
- Displays file contents during copying process
- Generates and compares MD5 checksums to verify file transfer accuracy
- Provides clear error messages for incorrect usage
- Ensures data integrity through multiple validation steps

The script serves as a flexible and secure tool for file copying and validation, suitable for scenarios 
requiring precise file handling and verification.
DOCUMENTATION

# Checking if the number of arguments is valid
if [ "$#" -ne 4 ]; then
    echo "Usage: ${0##*/} -i input_file -o output_file"
    exit 1
fi

# Initializing variables
INPUT_FILE=""
OUTPUT_FILE=""

# Reading arguments
while getopts ":i:o:" opt; do
    case $opt in
        i)
            INPUT_FILE="$OPTARG"
            ;;
        o)
            OUTPUT_FILE="$OPTARG"
            ;;
        \?)
            echo "Invalid option: -$OPTARG" >&2
            exit 1
            ;;
        :)
            echo "Option -$OPTARG requires an argument." >&2
            exit 1
            ;;
    esac
done

# Checking if both input and output files are specified
if [ -z "$INPUT_FILE" ] || [ -z "$OUTPUT_FILE" ]; then
    echo "Both input and output files must be specified."
    exit 1
fi

# Checking if the output file already exists
if [ -e "$OUTPUT_FILE" ]; then
    echo "The output file '$OUTPUT_FILE' already exists. Please choose a different file name."
    exit 1
fi

# Copying line by line and displaying the output in the terminal
while IFS= read -r line; do
    echo "$line"
    echo "$line" >> "$OUTPUT_FILE"
done < "$INPUT_FILE"

# Calculating the md5sum for the files
MD5_INPUT=$(md5sum "$INPUT_FILE" | awk '{print $1}')
MD5_OUTPUT=$(md5sum "$OUTPUT_FILE" | awk '{print $1}')

# Checking if the md5sums are equal
if [ "$MD5_INPUT" = "$MD5_OUTPUT" ]; then
    echo "The md5sums of the files are equal."
else
    echo "The md5sums of the files are different."
fi
