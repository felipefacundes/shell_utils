#!/bin/bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
This Bash script aims to manage GRUB themes in an automated and interactive way. 
It searches for 'theme.txt' files in predefined directories such as 
'/usr/share/grub/themes' and '/boot/grub/themes', 
using the recursive directory expansion enabled by 'shopt -s globstar'. 
After identifying the available themes, it presents a friendly selection interface via Whiptail, 
allowing the user to choose a theme. The script safely updates the '/etc/default/grub' file, 
setting the new 'GRUB_THEME' variable and regenerating the GRUB configuration file with 'grub-mkconfig'. 
It includes robust checks to ensure the integrity of operations 
and requires administrative authentication to apply changes to the system.

## Features
- Automatically detects available GRUB themes in common directories.
- Presents an interactive menu using Whiptail.
- Updates the GRUB configuration securely.
- Requires administrative privileges to apply changes.
DOCUMENTATION

# Enable recursive directory expansion
shopt -s globstar

theme_dirs=("/usr/share/grub/themes" "/boot/grub/themes")
theme_list=()

declare -A theme_paths

# Search theme.txt files in subfolders of specified directories
for dir in "${theme_dirs[@]}"; do
    for theme_file in "$dir"/**/theme.txt; do
        if [[ -f "$theme_file" ]]; then
            theme_name="$(basename "$(dirname "$theme_file")")"
            theme_list+=("$theme_name")
            theme_paths["$theme_name"]="$theme_file"
        fi
    done
done

# Check if themes were found
if [[ ${#theme_list[@]} -eq 0 ]]; then
    echo "No themes found in directories ${theme_dirs[*]}"
    exit 1
fi

# Create a list of options for Whiptail
whiptail_options=()
for theme in "${theme_list[@]}"; do
    # Extract only the main directory where the theme was found
    theme_dir=$(dirname "${theme_paths[$theme]}")
    if [[ "$theme_dir" == /usr/share/grub/themes/* ]]; then
        location="/usr/share/grub/themes"
    elif [[ "$theme_dir" == /boot/grub/themes/* ]]; then
        location="/boot/grub/themes"
    else
        location="Unknown directory"
    fi
    whiptail_options+=("$theme" "$location")
done

# Display the menu using Whiptail
selected_theme=$(whiptail --title "GRUB Theme Selection" \
                          --menu "Choose a theme for GRUB:" 20 78 10 \
                          "${whiptail_options[@]}" \
                          3>&1 1>&2 2>&3)

# Checks if the user has canceled the selection
if [[ $? -ne 0 ]]; then
    echo "Operation canceled by user."
    exit 1
fi

# Gets the full path of the selected theme
selected_theme_path="${theme_paths[$selected_theme]}"

# Sets the new value of GRUB_THEME
new_grub_theme="GRUB_THEME=\"$selected_theme_path\""


# Replace the theme in /etc/default/grub file (requires sudo)
echo -e "\nProvide admin password for sudo.\n"

if ! sudo -v; then
    echo "Incorrect password or authentication failed."
    exit 1
fi

sudo sed -i \
    -e "/^GRUB_THEME=/c\\$new_grub_theme" \
    /etc/default/grub

sudo grub-mkconfig -o /boot/grub/grub.cfg

if [[ $? -eq 0 ]]; then
    echo -e "\nGRUB theme successfully updated to $selected_theme."
    echo "Located in $(cat /etc/default/grub | grep GRUB_THEME=)"
    echo "Run 'update-grub' to apply the changes" If it has not been applied.
else
    echo "Error updating file /etc/default/grub."
    exit 1
fi
