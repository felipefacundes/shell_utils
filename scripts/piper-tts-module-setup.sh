#!/usr/bin/env bash
# License: GPLv3
# Credits: Felipe Facundes

: <<'DOCUMENTATION'
Script to automatically configure Piper TTS modules in Speech Dispatcher
Based on .onnx models found in /usr/share/piper-voices/
DOCUMENTATION

CONFIG_DIR="$HOME/.config/speech-dispatcher"
MODULES_DIR="$CONFIG_DIR/modules"
SPEECHD_CONF="$CONFIG_DIR/speechd.conf"
PIPER_VOICES_DIR="/usr/share/piper-voices"

# Check if Piper voices directory exists
if [ ! -d "$PIPER_VOICES_DIR" ]; then
    whiptail --title "Error" --msgbox "Piper voices directory not found: $PIPER_VOICES_DIR" 10 60
    exit 1
fi

# Create configuration directories if they don't exist
mkdir -p "$MODULES_DIR"

# Find all .onnx files
onnx_files=($(find "$PIPER_VOICES_DIR" -name "*.onnx" -type f))

if [ ${#onnx_files[@]} -eq 0 ]; then
    whiptail --title "Error" --msgbox "No .onnx files found in $PIPER_VOICES_DIR" 10 60
    exit 1
fi

# Prepare arrays for whiptail
voice_list=()
for file in "${onnx_files[@]}"; do
    # Extract information from path
    relative_path="${file#$PIPER_VOICES_DIR/}"
    
    # Extract language (first subdirectory after base directory)
    language=$(echo "$relative_path" | cut -d'/' -f1)
    
    # Extract model name (last part without extension)
    model_name=$(basename "$file" .onnx)
    
    # Use only the model name as identifier, not the full path
    voice_list+=("$model_name" "$model_name ($language)")
done

# Show default voice selection
default_voice_name=$(whiptail --title "Select Default Voice" \
    --menu "Choose the default voice for Speech Dispatcher:" \
    20 80 10 \
    "${voice_list[@]}" \
    3>&1 1>&2 2>&3)

if [ $? -ne 0 ] || [ -z "$default_voice_name" ]; then
    whiptail --title "Cancelled" --msgbox "Configuration cancelled by user." 10 40
    exit 1
fi

# Find the full path for the selected voice
default_voice=""
for file in "${onnx_files[@]}"; do
    model_name=$(basename "$file" .onnx)
    if [ "$model_name" = "$default_voice_name" ]; then
        default_voice="$file"
        break
    fi
done

if [ -z "$default_voice" ]; then
    whiptail --title "Error" --msgbox "Selected voice not found: $default_voice_name" 10 60
    exit 1
fi

# Extract information from selected default voice
default_relative_path="${default_voice#$PIPER_VOICES_DIR/}"
default_language=$(echo "$default_relative_path" | cut -d'/' -f1)
default_model_name=$(basename "$default_voice" .onnx)

# Create Piper module configuration file
PIPER_CONF="$MODULES_DIR/piper.conf"
cat > "$PIPER_CONF" << EOF
# Automatic Piper TTS module configuration
# Automatically generated by configuration script

# Main synthesis command
GenericExecuteSynth "echo '\$DATA' | piper-tts --model $default_voice --output-raw | aplay -r 22050 -f S16_LE -t raw -"

# Module dependencies
GenericCmdDependency "piper-tts"
GenericCmdDependency "aplay"

# Define the default voice
AddVoice "$default_language" "MALE1" "$default_model_name"

# Set default voice for general use
DefaultVoice "$default_model_name"

EOF

# Add other found voices
for file in "${onnx_files[@]}"; do
    if [ "$file" != "$default_voice" ]; then
        relative_path="${file#$PIPER_VOICES_DIR/}"
        language=$(echo "$relative_path" | cut -d'/' -f1)
        model_name=$(basename "$file" .onnx)
        
        # Determine gender based on model name (simple heuristic)
        gender="MALE1"
        if [[ "$model_name" =~ female|feminin|mulher ]]; then
            gender="FEMALE1"
        elif [[ "$model_name" =~ female|feminin|mulher|woman ]]; then
            gender="FEMALE2"
        elif [[ "$model_name" =~ male|masculin|homem|man ]]; then
            gender="MALE2"
        fi
        
        echo "AddVoice \"$language\" \"$gender\" \"$model_name\"" >> "$PIPER_CONF"
    fi
done

# Configure speechd.conf
# First, remove existing piper configuration if it exists
if [ -f "$SPEECHD_CONF" ]; then
    grep -v "piper.conf" "$SPEECHD_CONF" > "$SPEECHD_CONF.tmp" && mv "$SPEECHD_CONF.tmp" "$SPEECHD_CONF"
fi

# Add Piper module configuration
echo 'AddModule "piper" "sd_generic" "piper.conf"' >> "$SPEECHD_CONF"

# Show configuration summary
whiptail --title "Configuration Complete" \
    --msgbox "Configuration completed successfully!

Default voice: $default_model_name
Language: $default_language
Model file: $(basename "$default_voice")

Files created:
- $PIPER_CONF
- $SPEECHD_CONF

Total voices configured: ${#onnx_files[@]}" 15 70

# Offer to restart speech-dispatcher
if whiptail --title "Restart Service" --yesno "Do you want to restart Speech Dispatcher to apply the configurations?" 10 50; then
    if command -v systemctl >/dev/null && systemctl --user list-units | grep -q speech-dispatcher; then
        systemctl --user restart speech-dispatcher
        whiptail --title "Service Restarted" --msgbox "Speech Dispatcher restarted successfully!" 10 40
    else
        pkill -9 speech-dispatcher
        speech-dispatcher &
        whiptail --title "Service Restarted" --msgbox "Speech Dispatcher restarted successfully!" 10 40
    fi
fi

echo "Piper TTS configuration completed!"
echo "Default voice: $default_model_name ($default_language)"
echo "Total available voices: ${#onnx_files[@]}"
echo
echo "Test voice:"
echo "spd-say 'Hello, World!'"